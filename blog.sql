CREATE DATABASE  IF NOT EXISTS `blog` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci */;
USE `blog`;
-- MySQL dump 10.13  Distrib 5.7.26, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: blog
-- ------------------------------------------------------
-- Server version	5.5.5-10.1.38-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `body` text COLLATE utf8_unicode_ci NOT NULL,
  `created_at` datetime DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `dislike_count` int(11) DEFAULT NULL,
  `likes_count` int(11) DEFAULT NULL,
  `published_at` datetime DEFAULT NULL,
  `title` varchar(155) COLLATE utf8_unicode_ci NOT NULL,
  `updated_at` datetime DEFAULT NULL,
  `views_count` int(11) DEFAULT NULL,
  `category_id` bigint(20) NOT NULL,
  `user_id` bigint(20) NOT NULL,
  `comments_count` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_571gx7oqo5xpmgocegaidlcu9` (`title`),
  KEY `FKy5kkohbk00g0w88fi05k2hcw` (`category_id`),
  KEY `FKbc2qerk3l47javnl2yvn51uoi` (`user_id`),
  CONSTRAINT `FKbc2qerk3l47javnl2yvn51uoi` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`),
  CONSTRAINT `FKy5kkohbk00g0w88fi05k2hcw` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'<h1 class=\"article__title\">15 Essential Packages For Extending Laravel</h1>\r\n<p>Laravel is one of the most popular PHP frameworks for developing web applications. It offers a number of great features such as simple and fast routing, different ways for accessing relational databases, powerful dependency injection and much more.</p>\r\n<p>In this article we are going to share with you 15 excellent open-source PHP libraries for extending Laravel. You can easily include them in any Laravel project to add various utilities and improve your workflow.</p>\r\n<h2><a href=\"https://github.com/barryvdh/laravel-debugbar\" target=\"_blank\" rel=\"noreferrer noopener\">Laravel Debugbar</a></h2>\r\n<p>A package for Laravel 5 which adds a developer toolbar for debugging the PHP and Laravel code of your app. There are lots of options which allow you to show all queries, get information about the current Route, show the currently loaded Views, and much more.</p>\r\n<p><code></code></p>\r\n<h2><a href=\"https://github.com/Zizaco/entrust\" target=\"_blank\" rel=\"noreferrer noopener\">Entrust</a></h2>\r\n<p>Entrust is a Laravel 5 package which gives you a flexible way to add role-based permissions to your project. The library creates four new tables: roles, permissions, role_user and permission_role, which you can use to set up roles with different levels of access.</p>\r\n<h2><a href=\"https://github.com/laravel/socialite\" target=\"_blank\" rel=\"noreferrer noopener\">Socialite</a></h2>\r\n<p>Socialite offers a simple and easy way to handle OAuth authentication. It makes it possible for your users to log-in via some of the most popular social networks and services including Facebook, Twitter, Google, GitHub and BitBucket.</p>\r\n<h2><a href=\"https://github.com/jrean/laravel-user-verification\" target=\"_blank\" rel=\"noreferrer noopener\">User Verification</a></h2>\r\n<p>A package that allows you to verify users and validate emails. It generates and stores a verification token for the registered user, sends an email with the verification token link, handles the token verification, and sets the user as verified.</p>\r\n<h2><a href=\"https://github.com/laravel/tinker\" target=\"_blank\" rel=\"noreferrer noopener\">Tinker</a></h2>\r\n<p class=\"php hljs\" data-type=\"php\">Tinker allows you to interact with your entire Laravel application from the command line and access all the Eloquent jobs, events, and objects. It used to be part of Laravel, but after version 5.4 it is in a optional add-on that needs to be installed separately. </p>\r\n<h2><a href=\"https://github.com/davejamesmiller/laravel-breadcrumbs\" target=\"_blank\" rel=\"noreferrer noopener\">Breadcrumbs</a></h2>\r\n<p class=\"php hljs\" data-type=\"php\">With this package you can create breadcrumb page controls in a simple and easy way. It supports some of the most popular front-end frameworks such as Bootstrap, Bulma, Foundation and Materialize.</p>\r\n<h2><a href=\"https://github.com/cviebrock/eloquent-sluggable\" target=\"_blank\" rel=\"noreferrer noopener\">Eloquent-Sluggable</a></h2>\r\n<p>Slugging is creating a simplified, URL-friendly version of a string by converting it to one case and removing spaces, accented letters, ampersands, etc. With Eloquent-Sluggable you can easily create slugs for all the Eloquent models in your project.</p>\r\n<h2><a href=\"https://github.com/Xethron/migrations-generator\" target=\"_blank\" rel=\"noreferrer noopener\">Migrations Generator</a></h2>\r\n<p>A Laravel package which can be used to generate migrations from an existing database, including indexes and foreign keys. When you run the following command you can create migrations for all the tables in your database.</p>\r\n<h2><a href=\"https://github.com/anhskohbo/no-captcha\" target=\"_blank\" rel=\"noreferrer noopener\">NoCaptcha</a></h2>\r\n<p>Laravel 5 package for implementing Google\'s <a href=\"https://www.google.com/recaptcha/intro/android.html\" target=\"_blank\" rel=\"noreferrer noopener\">reCAPTCHA</a> \"I\'m not a robot\" validation and protecting your forms from spam. To use the service you will need to obtain a free API key.</p>\r\n<h2><a href=\"https://github.com/svenluijten/artisan-view\" target=\"_blank\" rel=\"noreferrer noopener\">Artisan View</a></h2>\r\n<p>A command line utility that adds a number of Artisan commands for working with the views in your app. It allows you to automatically generate view templates without having to manually create new blade files.</p>\r\n<h2><a href=\"https://github.com/spatie/laravel-backup\" target=\"_blank\" rel=\"noreferrer noopener\">Laravel Backup</a></h2>\r\n<p>With this Laravel package you can back up all of the files in your project. All you need to do is run this command:</p>\r\n<pre class=\"php hljs\" data-type=\"php\">php artisan backup:run\r\n</pre>\r\n<p>It creates a zipfile with all the files in the directory and a dump of your database. Can be stored on any file system.</p>\r\n<h2><a href=\"https://github.com/barryvdh/laravel-cors\" target=\"_blank\" rel=\"noreferrer noopener\">CORS Middleware</a></h2>\r\n<p>Setting up CORS (Cross-Origin Resource Sharing Headers) on your website can be a lot of work. With this Laravel library the configuration process is very simplified. It handles CORS pre-flight options requests and adds CORS headers to your responses</p>\r\n<h2><a href=\"https://github.com/Folkloreatelier/laravel-graphql\" target=\"_blank\" rel=\"noreferrer noopener\">Laravel GraphQL</a></h2>\r\n<p>GraphQL is a data query language that provides an alternative to traditional REST architectures. Developers define the structure of the data required, and get exactly the same structure from the server. This package will help you set up and use GraphQL in your Laravel apps.</p>\r\n<h2><a href=\"https://github.com/JeffreyWay/laravel-mix\" target=\"_blank\" rel=\"noreferrer noopener\">Laravel Mix</a></h2>\r\n<p>Laravel Mix provides a rich API for defining Webpack build steps for your project. It uses a few common CSS and JavaScript pre-processors that can be chained together to transform and format your assets.</p>\r\n<h2><a href=\"https://github.com/laracasts/Laravel-5-Generators-Extended\" target=\"_blank\" rel=\"noreferrer noopener\">Laravel Extended Generators</a></h2>\r\n<p>A library by the team from <a href=\"https://laracasts.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Laracasts</a> that offers a number of generators that can save you a lot of time when developing your project. It allows you to quickly setup new models, views, controllers, migrations, seeds, and more.</p>\r\n<p>Â </p>','2019-07-07 08:25:59','In this article, we are going to share with you 15 excellent open source PHP libraries for extending Laravel. You can easily include them in any Laravel project to add various utilities and improve your workflow.',0,1,'2019-07-07 08:28:22','15 Essential Packages For Extending Laravel ','2019-07-07 08:25:59',8,1,1,0),(2,'<h1 class=\"article__title\">Learn Webpack in 15 Minutes</h1>\r\n<p>Build tools have become an integral part of web development, mainly due to the ever-increasing complexity of JavaScript apps. Bundlers allow us to package, compile, and organize the many assets and libraries needed for a modern web project.</p>\r\n<p>In this tutorial we will take a look at <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noreferrer noopener\">webpack</a>, a powerful open-source bundler and preprocessor that can handle a huge variety of different tasks. We\'ll show you how to write modules, bundle code, and use some of the loader plugins. The tutorial is designed for total beginners to webpack, but having some JavaScript knowledge is advised.</p>\r\n<p><img src=\"https://tutorialzine.com/media/2017/04/webpack-logo.jpg\" alt=\"webpack-logo.jpg\" /></p>\r\n<h2>Why webpack?</h2>\r\n<p>Much like any other aspect of web development, there isn\'t a standard for which build tool to use. Right now, developers have to choose between <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noreferrer noopener\">webpack</a>, <a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Gulp</a>, <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Browserify</a>, <a href=\"https://docs.npmjs.com/misc/scripts\" target=\"_blank\" rel=\"noreferrer noopener\">NPM scripts</a>, <a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Grunt</a>, and like 10 others. There are many in-depth comparisons out there, but all of these tools are very similar, so most of the time it comes down to personal preference and what project you are working on.</p>\r\n<p>Here are some pros and cons to help you decide whether webpack is the tool for you:</p>\r\n<p>Pros:</p>\r\n<ul>\r\n<li>Great for working with singe-page apps</li>\r\n<li>Accepts both <code>require()</code> and <code>import</code> module syntaxes</li>\r\n<li>Allows for very advanced <a href=\"https://webpack.js.org/guides/code-splitting/#components/sidebar/sidebar.jsx\" target=\"_blank\" rel=\"noreferrer noopener\">code splitting</a></li>\r\n<li><a href=\"https://webpack.js.org/concepts/hot-module-replacement/\" target=\"_blank\" rel=\"noreferrer noopener\">Hot Reload</a> for quicker development with React, Vue.js and similar frameworks</li>\r\n<li>?ost popular build tool according to the <a href=\"http://stateofjs.com/2016/buildtools/\" target=\"_blank\" rel=\"noreferrer noopener\">2016 JavaScript survey</a></li>\r\n</ul>\r\n<p>Cons:</p>\r\n<ul>\r\n<li>Not suitable for beginners in web development</li>\r\n<li>Working with CSS files, images, and other non-JS resources is confusing at first</li>\r\n<li>Documentation could be better</li>\r\n<li>Changes a lot, even most 2016 tutorials are already outdated</li>\r\n</ul>\r\n<h2>Installation</h2>\r\n<p>The easiest way to install webpack is by using a package manager. We will go with <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">npm</a> but feel free to use <a href=\"https://yarnpkg.com/en/\" target=\"_blank\" rel=\"noreferrer noopener\">Yarn</a> or another hip alternative. In both cases you need to have <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noreferrer noopener\">Node.js</a> on your machine and a <em>package.json</em> ready to go.</p>\r\n<p>It is preferred to install it locally (without the <code>-g</code> tag). This will make sure everyone working on your project has the same version of webpack.</p>\r\n<pre class=\"hljs sql\" data-type=\"plain\">npm <span class=\"hljs-keyword\">install</span> webpack <span class=\"hljs-comment\">--save-dev</span></pre>\r\n<p>Once we have it installed, it\'s best to run webpack via a Node.js script. Add these lines to your package.json:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\">\r\n    <span class=\"hljs-string\">\"scripts\"</span>: {\r\n        <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"webpack -p\"</span>,\r\n        <span class=\"hljs-string\">\"watch\"</span>: <span class=\"hljs-string\">\"webpack --watch\"</span>\r\n    },\r\n</pre>\r\n<p>Now by calling <code>npm run build</code> from the terminal we can make webpack bundle our files (the <code>-p</code> option stands for production and minifies the bundled code). Running <code>npm run watch</code> will start a process that automatically bundles our files when any of them change.</p>\r\n<p>The last part of the setup is to tell webpack which files to bundle up. The recommended way to do this is by creating a config file.</p>\r\n<p>Â </p>\r\n<h2>Webpack Config File</h2>\r\n<p>Here we will look at the config file in its most basic form but don\'t let that fool you - the webpack config file is quite powerful, varies a lot from project to project, and can become super complex in some cases.</p>\r\n<p>In the root directory of your project add a file called <em>webpack.config.js</em>.</p>\r\n<h3>webpack.config.js</h3>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'path\'</span>);\r\n\r\n<span class=\"hljs-built_in\">module</span>.exports = {\r\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\'./assets/js/index.js\'</span>,\r\n  <span class=\"hljs-attr\">output</span>: {\r\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">\'bundle.js\'</span>,\r\n    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">\'dist\'</span>)\r\n  }\r\n};</pre>\r\n<p>The <strong>entry</strong> option tells webpack which is our main JavaScript file. There are many different <a href=\"https://webpack.js.org/concepts/entry-points/\" target=\"_blank\" rel=\"noreferrer noopener\">strategies</a> for configuring entry points but in most cases a single entry is enough.</p>\r\n<p>In <strong>output</strong> we specify the name and path of our bundle. After running webpack we will have all our JavaScript in a file called <strong>bundle.js</strong>. This is the only script file that we will link in our HTML:</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./dist/bundle.js\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></pre>\r\n<p>This setup should be enough to get us started. Later we will add some more stuff to it, but first let\'s see how modules work.</p>\r\n<p>Â </p>\r\n<h2>Webpack Modules</h2>\r\n<p>Webpack provides <a href=\"https://webpack.js.org/concepts/modules/\" target=\"_blank\" rel=\"noreferrer noopener\">multiple ways</a> to work with modules, and most of the time you are free to go with whichever one you like. For this tutorial we will use the ES6 <code>import</code> syntax.</p>\r\n<p>We want to add a module that greets our users. We create a file called <em>greeter.js</em> and make it export a simple function:</p>\r\n<h3>greeter.js</h3>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">greet</span>() </span>{\r\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'Have a great day!\'</span>);\r\n};\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> greet;</pre>\r\n<p>To use this module, we have to import it and call it in our <strong>entry point</strong>, which if you look back at the config file is index.js.</p>\r\n<h3>index.js</h3>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-keyword\">import</span> greet <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./greeter.js\'</span>;\r\n\r\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"I\'m the entry point\"</span>);\r\ngreet();</pre>\r\n<p>Now when we run the bundler with <code>npm run build</code>, and open our HTML in the browser, we see this:</p>\r\n<p><img src=\"https://tutorialzine.com/media/2017/04/console-greet.png\" alt=\"console-greet.png\" /></p>\r\n<p>Our entry point and our greeter module were compiled into one file called <em>bundle.js</em> and it was executed by the browser.</p>','2019-07-07 08:59:55','In this tutorial, we will take a look at webpack, a powerful open-source bundler and preprocessor that can handle a huge variety of different tasks.',1,0,'2019-07-07 09:00:14','Learn Webpack in 15 Minutes ','2019-07-07 08:59:55',6,3,1,0),(3,'<h1 class=\"article__title\">10 Interesting JavaScript and CSS Libraries for April 2019</h1>\r\n<p>Our mission at Tutorialzine is to keep you up to date with the latest and coolest trends in web development. Thatâs why every month we release a handpicked collection of some of the best resources that weâve stumbled upon and deemed worthy of your attention.</p>\r\n<p><strong>If you enjoy these articles, make sure to subscribe to <a href=\"https://devawesome.io\" target=\"_blank\" rel=\"noreferrer noopener\">Dev Awesome</a></strong>. It is our biweekly newsletter where we share cool new libraries, articles, and free design resources!</p>\r\n<h2><a href=\"https://cube.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Cube.js</a></h2>\r\n<p>Powerful open-source framework for developing complex, custom-tailored analytics systems. Consists of frontend SDKs and an API backend that works with most databases including MySQL, Postreges and MongoDB.</p>\r\n<h2><a href=\"https://github.com/kognise/water.css\" target=\"_blank\" rel=\"noreferrer noopener\">Water.css</a></h2>\r\n<p>A just-add-css framework that applies styles without the need of defining element classes. Just include it in your project via CDN and all your pages will automatically look better. Includes a light and dark theme, and can be customized via SCSS.</p>\r\n<h2><a href=\"https://codex.so/editor\" target=\"_blank\" rel=\"noreferrer noopener\">Editor.js</a></h2>\r\n<p>Rich text & media editor that outputs data in JSON format. It is fully modular and made out of \"blocks\", meaning every structural unit is it\'s own block (e.g. Paragraph, Heading, Image are all blocks) and users can easily write their own plugins to further extend the editor.</p>\r\n<h2><a href=\"https://github.com/alikinvv/stepper\" target=\"_blank\" rel=\"noreferrer noopener\">Stepper</a></h2>\r\n<p>Pretty numeric stepper component, perfect for upvote / downvote controls or other counter elements. Very nicely animated with buttery-smooth CSS effects on clicking the arrows.</p>\r\n<h2><a href=\"https://github.com/leeoniya/dropcss\" target=\"_blank\" rel=\"noreferrer noopener\">DropCSS</a></h2>\r\n<p>Thorough CSS cleaner that takes your HTML and CSS and returns only the styles that are actually used. It removes all unused style blocks, repeated selectors, @keyframes and more. Highly optimized and exceptionally fast.</p>\r\n<h2><a href=\"https://github.com/twitter/twemoji\" target=\"_blank\" rel=\"noreferrer noopener\">Twemoji</a></h2>\r\n<p>Great library by the Twitter team that provides standard Unicode emoji support across all platforms. With more then 3000 emojis and a solid API, it is can be the perfect solution when you want to add emojis to your apps.</p>\r\n<h2><a href=\"https://foreseaz.github.io/react-loadcon/\" target=\"_blank\" rel=\"noreferrer noopener\">React LoadCon</a></h2>\r\n<p>React component that allows you to animate your website\'s favicon using a series of dynamically generated images. This effect can be used as a progress or loading indicator, or just as a cool little animation to make your pages stand out.</p>\r\n<h2><a href=\"https://github.com/matvp91/indigo-player\" target=\"_blank\" rel=\"noreferrer noopener\">Indigo Player</a></h2>\r\n<p>React-based video player with out-of-the-box features such as subtitles, thumbnails, quality selection and more. Highly extensible, modern and offering support for most of the popular video formats and codecs.</p>\r\n<h2><a href=\"https://github.com/niklasvh/html2canvas\" target=\"_blank\" rel=\"noreferrer noopener\">html2canvas</a></h2>\r\n<p>This cool script takes the elements and styles in a page and captures a \"screenshot\" by rendering a copy of the DOM. Since the screenshots are based on the DOM they might not be 100% accurate but the library can still be a great tool for debugging and automated tests.</p>\r\n<h2><a href=\"https://github.com/jshjohnson/Choices\" target=\"_blank\" rel=\"noreferrer noopener\">Choices</a></h2>\r\n<p>Lightweight library for making highly customizable select boxes, text areas, and other form inputs. Similar to <a href=\"https://select2.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Select2</a> and <a href=\"https://selectize.github.io/selectize.js/\" target=\"_blank\" rel=\"noreferrer noopener\">Selectize</a> but without the jQuery dependency.</p>','2019-07-07 09:13:35','That\'s why every month we release a handpicked collection of some of the best resources that we\'ve stumbled upon and deemed worthy of your attention.',0,0,'2019-07-07 09:13:52','10 Interesting JavaScript and CSS Libraries for April 2019 ','2019-07-07 09:13:35',6,3,1,0),(4,'<h1 class=\"article__title\">The Simplest Way to Add Google Maps to Your Site</h1>\r\n<p>When building a website, you often need to include a map to give people a better sense of direction. Google Maps is the most popular mapping service today and it offers a wide variety of tools and services that you can use.</p>\r\n<p>In this tutorial we will show you how to easily add a map to your website and customize it using the <a href=\"https://github.com/hpneo/gmaps\" target=\"_blank\" rel=\"noreferrer noopener\">gMaps.js</a> library. It is a simple and easy to use library, that allows you to use the full potential of Google Maps without using large amount of code.</p>\r\n<h2>Project Overview</h2>\r\n<p>To demonstrate the usage of Google Maps, we have created a simple design using HTML and Bootstrap 4. You can check the image below for the final result.<img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2018/05/google-maps-demo.png\" alt=\"google-maps-demo.png\" /></p>\r\n<p>Â </p>\r\n<h2>Layout</h2>\r\n<p>Our design consists of a Bootstrap row and two columns. In the left column we show the Google map and in the right column we have headings, with some text, font-awesome icons and a small image gallery.</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"map-example\"</span>></span>\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>></span>\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-6\"</span>></span>\r\n            <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"map\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n        <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-6\"</span>></span>\r\n            <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"heading\"</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">h3</span>></span>Lorem Ipsum Dolor<span class=\"hljs-tag\"></<span class=\"hljs-name\">h3</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"rating\"</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fa fa-star icon\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">i</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fa fa-star icon\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">i</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fa fa-star icon\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">i</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fa fa-star icon\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">i</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fa fa-star-o icon\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">i</span>></span>\r\n                <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n            <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n            <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"info\"</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">p</span>></span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ornare leo porta cursus porttitor. Proin quis tempor lectus. Cras sodales nisi ut felis tincidunt suscipit. Nullam consectetur odio et lacus tempor vestibulum.<span class=\"hljs-tag\"></<span class=\"hljs-name\">p</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">p</span>></span>Aenean convallis, tortor eget vehicula vestibulum, sem nibh rutrum sem, vel sodales nisl velit eu ex. Sed hendrerit efficitur sollicitudin. Maecenas tempus augue lacus.<span class=\"hljs-tag\"></<span class=\"hljs-name\">p</span>></span>\r\n            <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n            <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"gallery\"</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">h4</span>></span>Photos<span class=\"hljs-tag\"></<span class=\"hljs-name\">h4</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-4\"</span>></span>\r\n                        <span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"assets/img/image2.jpg\"</span>></span><span class=\"hljs-tag\"><<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-fluid image\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"assets/img/image2.jpg\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span>\r\n                    <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-4\"</span>></span>\r\n                        <span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"assets/img/image3.jpg\"</span>></span><span class=\"hljs-tag\"><<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-fluid image\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"assets/img/image3.jpg\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span>\r\n                    <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-4\"</span>></span>\r\n                        <span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"assets/img/image4.jpg\"</span>></span><span class=\"hljs-tag\"><<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-fluid image\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"assets/img/image4.jpg\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span>\r\n                    <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n                <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n            <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n        <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n    <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>><br /><br /></span></pre>\r\n<h3>Map Configuration</h3>\r\n<p>In order to use Google Maps, you need to import the <a href=\"https://github.com/hpneo/gmaps\" target=\"_blank\" rel=\"noreferrer noopener\">gMaps.js</a> library and the Google Maps API. It requires an API key, so if you already have one you can use it, otherwise you can go to <a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key\" target=\"_blank\" rel=\"noreferrer noopener\">this link</a> to learn how to create one. When you have your key ready, simply replace the \"YOUR_API_KEY\" part of the script.</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://maps.google.com/maps/api/js?key=YOUR_API_KEY\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span>\r\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/gmaps.js/0.4.25/gmaps.js\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span>\r\n</pre>\r\n<p>Now we need to generate the map. We create a new map object and as parameters we set the selector (\'#map\'), and the latitude and longitude of the point we want to show on the map.</p>\r\n<p>Next we need to add a marker on the map. To do so, use the <code>addMarker()</code> method with the latitude and longitude where you want to place it. We can also set the initial zoom at which the map is displayed using the <code>setZoom()</code> method with an integer number as parameter. The lower the number, the more \"zoomed in\" the map is.</p>\r\n<pre class=\"javascript hljs\" data-type=\"javascript\"><span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-keyword\">new</span> GMaps({\r\n    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#map\'</span>,\r\n    <span class=\"hljs-attr\">lat</span>:  <span class=\"hljs-number\">40.730610</span>,\r\n    <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">-73.935242</span>\r\n});\r\n\r\nmap.addMarker({\r\n    <span class=\"hljs-attr\">lat</span>: <span class=\"hljs-number\">40.700610</span>,\r\n    <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-number\">-73.997242</span>,\r\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\'New York\'</span>\r\n});\r\n\r\nmap.setZoom(<span class=\"hljs-number\">8</span>);\r\n</pre>\r\n<h2>Styles</h2>\r\n<p>The styles are located in a separate CSS file. Since we are using Bootstrap, most of the styling is done by the framework. We have added some margin and padding tweaks, font colors and box-shadows.</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-class\">.navbar</span><span class=\"hljs-selector-class\">.navbar-light</span><span class=\"hljs-selector-class\">.navbar-expand-lg</span><span class=\"hljs-selector-class\">.bg-white</span><span class=\"hljs-selector-class\">.page-navbar</span> {\r\n  <span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-built_in\">rgba</span>(0, 0, 0, 0.1);\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.navbar-light</span> <span class=\"hljs-selector-class\">.navbar-nav</span> <span class=\"hljs-selector-class\">.active</span> > <span class=\"hljs-selector-class\">.nav-link</span>, <span class=\"hljs-selector-class\">.navbar-light</span> <span class=\"hljs-selector-class\">.navbar-nav</span> <span class=\"hljs-selector-class\">.nav-link</span><span class=\"hljs-selector-class\">.active</span>, <span class=\"hljs-selector-class\">.navbar-light</span> <span class=\"hljs-selector-class\">.navbar-nav</span> <span class=\"hljs-selector-class\">.nav-link</span><span class=\"hljs-selector-class\">.show</span>, <span class=\"hljs-selector-class\">.navbar-light</span> <span class=\"hljs-selector-class\">.navbar-nav</span> <span class=\"hljs-selector-class\">.show</span> > <span class=\"hljs-selector-class\">.nav-link</span> {\r\n  <span class=\"hljs-attribute\">font-weight</span>:bold;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.nav-item</span><span class=\"hljs-selector-class\">.item</span> {\r\n  <span class=\"hljs-attribute\">padding-right</span>:<span class=\"hljs-number\">2rem</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.navbar-nav</span><span class=\"hljs-selector-pseudo\">:last-child</span> <span class=\"hljs-selector-class\">.item</span><span class=\"hljs-selector-pseudo\">:last-child</span>, <span class=\"hljs-selector-class\">.navbar-nav</span><span class=\"hljs-selector-pseudo\">:last-child</span> <span class=\"hljs-selector-class\">.item</span><span class=\"hljs-selector-pseudo\">:last-child</span> <span class=\"hljs-selector-tag\">a</span> {\r\n  <span class=\"hljs-attribute\">padding-right</span>:<span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.map-example</span> <span class=\"hljs-selector-class\">.heading</span> <span class=\"hljs-selector-class\">.icon</span> {\r\n  <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-number\">#ffb526</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.map-example</span> {\r\n  <span class=\"hljs-attribute\">margin-top</span>:<span class=\"hljs-number\">50px</span>;\r\n  <span class=\"hljs-attribute\">padding-bottom</span>:<span class=\"hljs-number\">100px</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.map-example</span> <span class=\"hljs-selector-class\">.heading</span> {\r\n  <span class=\"hljs-attribute\">margin-bottom</span>:<span class=\"hljs-number\">20px</span>;\r\n  <span class=\"hljs-attribute\">border-bottom</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#e4e4e4</span>;\r\n  <span class=\"hljs-attribute\">padding-bottom</span>:<span class=\"hljs-number\">30px</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.map-example</span> <span class=\"hljs-selector-class\">.info</span> {\r\n  <span class=\"hljs-attribute\">margin-bottom</span>:<span class=\"hljs-number\">20px</span>;\r\n  <span class=\"hljs-attribute\">border-bottom</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#e4e4e4</span>;\r\n  <span class=\"hljs-attribute\">padding-bottom</span>:<span class=\"hljs-number\">20px</span>;\r\n  <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-number\">#636363</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.map-example</span> <span class=\"hljs-selector-class\">.gallery</span> <span class=\"hljs-selector-tag\">h4</span> {\r\n  <span class=\"hljs-attribute\">margin-bottom</span>:<span class=\"hljs-number\">30px</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.map-example</span> <span class=\"hljs-selector-class\">.gallery</span> <span class=\"hljs-selector-class\">.image</span> {\r\n  <span class=\"hljs-attribute\">margin-bottom</span>:<span class=\"hljs-number\">15px</span>;\r\n  <span class=\"hljs-attribute\">box-shadow</span>:<span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-built_in\">rgba</span>(0, 0, 0, 0.15);\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.map-example</span> <span class=\"hljs-selector-id\">#map</span> {\r\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\r\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.page-footer</span> {\r\n  <span class=\"hljs-attribute\">padding-top</span>:<span class=\"hljs-number\">32px</span>;\r\n  <span class=\"hljs-attribute\">border-top</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ddd</span>;\r\n  <span class=\"hljs-attribute\">text-align</span>:center;\r\n  <span class=\"hljs-attribute\">padding-bottom</span>:<span class=\"hljs-number\">20px</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.page-footer</span> <span class=\"hljs-selector-tag\">a</span> {\r\n  <span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">10px</span>;\r\n  <span class=\"hljs-attribute\">display</span>:inline-block;\r\n  <span class=\"hljs-attribute\">color</span>:<span class=\"hljs-number\">#282b2d</span>;\r\n  <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">18px</span>;\r\n}\r\n\r\n<span class=\"hljs-selector-class\">.page-footer</span> <span class=\"hljs-selector-class\">.links</span> {\r\n  <span class=\"hljs-attribute\">display</span>:inline-block;\r\n}\r\n\r\n@<span class=\"hljs-keyword\">media</span>(<span class=\"hljs-keyword\">min</span>-<span class=\"hljs-keyword\">width</span>: <span class=\"hljs-number\">992px</span>){\r\n  <span class=\"hljs-selector-class\">.map-example</span> <span class=\"hljs-selector-id\">#map</span>{\r\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">500px</span>;\r\n  }\r\n}\r\n</pre>\r\n<h2>Google Maps in Bootstrap Studio</h2>\r\n<p>The Bootstrap Studio app offers a fast and easy way to configure Google Maps without having to write a single line of code. You can find detailed instructions on how to add <a href=\"https://bootstrapstudio.io/tutorials/google-maps\" target=\"_blank\" rel=\"noreferrer noopener\">Google Maps in your projects</a> in the Bootstrap studio tutorials section.</p>\r\n<h2>Conclusion</h2>\r\n<p>You can get the full source code for this tutorial, from the <strong>Download</strong> button near the top of the page. You are free to customize and use it in all your projects, for commercial or personal use, no attribution required (<a href=\"https://tutorialzine.com/license\" target=\"_blank\" rel=\"noreferrer noopener\">our license</a>).</p>','2019-07-07 09:21:43','We will show you how to easily add a map to your website and customize it using the gMaps.js library. It is simple and easy to use the library, that allows you to use the full potential of Google Maps without using a large amount of code.',0,0,'2019-07-07 09:30:24','The Simplest Way to Add Google Maps to Your Site ','2019-07-07 09:30:08',6,3,1,0),(9,'<h1 class=\"article__title\">8 Awesome and Free PHP Books</h1>\r\n<p>PHP is one of the most popular scripting language for web development. It has an approachable and easy to learn syntax, works on all operating systems, and can be used for building classic web sites and applications, mobile app backends, REST APIs and more.</p>\r\n<p>In this article, we\'ve collected some of our favorite free PHP books that can help you learn new approaches to solving problems and keep your skill set up to date.</p>\r\n<h2><a href=\"https://leanpub.com/php-pandas/read\" target=\"_blank\" rel=\"noreferrer noopener\">PHP Pandas</a></h2>\r\n<p>This book is for beginners and intermediate developers who want to learn something new or improve their skills. It is an easy read, and covers everything from the fundamentals of the language to building large PHP applications. Each chapter includes very detailed explanations with some easy to understand examples.</p>\r\n<h2><a href=\"https://phpsecurity.readthedocs.io/en/latest/Introduction.html\" target=\"_blank\" rel=\"noreferrer noopener\">Survive the Deep End: PHP Security</a></h2>\r\n<p>This book will show you how to improve the security of your app. It includes in-depth explanations of some of the most used security attacks, comprehensive examples and gives you advice on how to protect your application from them.</p>\r\n<h2><a href=\"https://daylerees.com/codesmart/\" target=\"_blank\" rel=\"noreferrer noopener\">Laravel: Code Smart</a></h2>\r\n<p>Laravel: Code Smart is a great introduction to Laravel, one of the most popular php frameworks. It is easy to read and understand, has great examples and shows you some of the best practices used in Laravel. The book is great for beginners and it teaches you how to set up a new project from scratch and build on it using the powerful features of the framework.</p>\r\n<h2><a href=\"http://www.phptherightway.com/\" target=\"_blank\" rel=\"noreferrer noopener\">PHP: The Right Way</a></h2>\r\n<p>PHP: The Right Way is a great tool for learning PHP. It teaches you best practices, dependency injection, working with databases, testing and much more, including links to external reading materials and tutorials. It is translated in many different languages like English, German, Spanish, French and many more.</p>\r\n<h2><a href=\"http://www.giorgiosironi.com/2009/12/practical-php-testing-is-here.html\" target=\"_blank\" rel=\"noreferrer noopener\">Practical PHP Testing</a></h2>\r\n<p>This book is aimed at advanced php developers and is comprised of articles from the author\'s Practical PHP Testing blog series. It includes a chapter about test-driven developement(TDD), code samples and a number of exercises after each chapter.</p>\r\n<h2><a href=\"https://www.phpreferencebook.com/\" target=\"_blank\" rel=\"noreferrer noopener\">PHP Reference: Beginner to Intermediate</a></h2>\r\n<p>The book covers the basics of PHP and is a handy resource to keep around as a reference. It shows you how to use operators, structures, variables, functions, working with databases and much more, with great and easy to understand explanations, including a number of examples for each topic. Although it is written for PHP5, almost everything still applies for PHP7 thanks to the language\'s backwards compatibility.</p>\r\n<h2><a href=\"https://leanpub.com/php7fromscratch/read\" target=\"_blank\" rel=\"noreferrer noopener\">PHP 7 from Scratch</a></h2>\r\n<p>PHP 7 From Scratch is a book for total beginners that explains basic properties of the language, setting up a development environment, using built-in functions and constructing a simple web page. At the end of every chapter, there are additional exercises you may do to further your understanding.</p>\r\n<h2><a href=\"https://leanpub.com/ddd-in-php/read\" target=\"_blank\" rel=\"noreferrer noopener\">Domain-Driven Desing in PHP</a></h2>\r\n<p>Domain Driven Design is an approach for modeling complex software projects to reflect real-world systems. It is a technique that is especially popular in the Java and .Net world, but this book gives you a practical introduction to DDD in PHP. It is a great resource for intermediate and advanced developers.</p>\r\n<p>Â </p>','2019-07-07 09:39:03','we\'ve collected some of our favourite free PHP books that can help you learn new approaches to solving problems and keep your skill set up to date.',0,0,'2019-07-07 09:39:14','8 Awesome and Free PHP Books ','2019-07-07 09:39:03',20,1,1,0),(10,'<h1 class=\"article__title\">15 Awesome React Components</h1>\r\n<p>React is one of the most popular front-end JavaScript libraries. Developed by Facebook, it allows you to break down even the most complex user interfaces into simple, reusable components. Instead of creating everything on your own, you can install and use external components to quickly add new features and functionalities.</p>\r\n<p>In this article we are going to share with you 15 interesting React components that are actively maintained and can be of great help in your next project.</p>\r\n<h2><a href=\"https://github.com/negomi/react-burger-menu\" target=\"_blank\" rel=\"noreferrer noopener\">React Burger Menu</a></h2>\r\n<p>React-burger-menu offers an off-canvas sidebar React component with a number of effects and styles using CSS transitions. It also supports multiple animations like slide, stack, bubble, push and more. It uses modern CSS3 featues, so some animations may not be displayed properly in all browsers.</p>\r\n<h2><a href=\"https://github.com/akiran/react-slick\" target=\"_blank\" rel=\"noreferrer noopener\">React Slick</a></h2>\r\n<p>A React component for creating beautiful and responsive carousel sliders. It is the react based version of <a href=\"http://kenwheeler.github.io/slick/\" target=\"_blank\" rel=\"noreferrer noopener\">slick carousel</a>. It offers a large number of various carousel options that you can customize, including infinite rotation, auto play, lazy loading and much more.</p>\r\n<h2><a href=\"https://github.com/istarkov/google-map-react\" target=\"_blank\" rel=\"noreferrer noopener\">React Google Map</a></h2>\r\n<p>This is a React component based on the <a href=\"https://developers.google.com/maps/\" target=\"_blank\" rel=\"noreferrer noopener\">Google Maps API</a>. It is fully isomorphic and allows you to render animated react components on the map even if the Google Maps API is not loaded. Thanks to the internal hover algorithm every object on the map can be hovered.</p>\r\n<h2><a href=\"https://github.com/neptunian/react-photo-gallery\" target=\"_blank\" rel=\"noreferrer noopener\">React Photo Gallery</a></h2>\r\n<p>A stateless, responsive and highly customizable React photo gallery. It maintains the original aspect ratio of your photos and uses actual image elements. It is also possible to pass your custom image components for adding extra functionality like captions and favorites.</p>\r\n<h2><a href=\"https://github.com/amarofashion/react-credit-cards\" target=\"_blank\" rel=\"noreferrer noopener\">React Credit Cards</a></h2>\r\n<p>A modern and beautiful credit card component that can be used for payment forms. It has a built in credit card validator, that checks the card number and recognizes the card type. It supports all credit card types available in <a href=\"https://github.com/jessepollak/payment\" target=\"_blank\" rel=\"noreferrer noopener\">Payment</a>.</p>\r\n<h2><a href=\"https://github.com/airbnb/react-dates\" target=\"_blank\" rel=\"noreferrer noopener\">React Dates</a></h2>\r\n<p>React-dates is an interactive, fully featured and mobile-friendly datepicker. It allows you to select single date or a date range using the built in properties. You can also customize the look and feel of the inputs and the calendar.</p>\r\n<h2><a href=\"https://github.com/igorprado/react-notification-system\" target=\"_blank\" rel=\"noreferrer noopener\">React Notification System</a></h2>\r\n<p>A complete and totally customizable component for notifications in React. With the built in notification properties you can set its title, message, position, action and much more. For optimal appearance, this component must be rendered on a top level HTML element in your application to avoid position conflicts.</p>\r\n<h2><a href=\"https://github.com/CookPete/react-player\" target=\"_blank\" rel=\"noreferrer noopener\">ReactPlayer</a></h2>\r\n<p>A React component for playing videos from different file paths and URLs like YouTube, Facebook, Twitch and more. It parses the URL and loads in the appropriate markup and external SDKs to play the video. The built in properties can be used to control the volume, the player width and height and more.</p>\r\n<h2><a href=\"https://github.com/atlassian/react-beautiful-dnd\" target=\"_blank\" rel=\"noreferrer noopener\">React Beautiful DnD</a></h2>\r\n<p>A React library by Atlassian for making drag-and-drop components. It offers a clean and powerful API that is easy to use while still offering lots of customization options and controls. The generated components have smooth GPU-powered animations that naturally reflect when elements are picked up or reordered.</p>\r\n<h2><a href=\"https://unsplash.github.io/react-trend/\" target=\"_blank\" rel=\"noreferrer noopener\">React Trend</a></h2>\r\n<p>A React component by the <a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Unsplash</a> team that can be used to create beautiful line graphs suitable for displaying trending and activity metrics. This project follows a minimalistic approach and gives you a simple, polished solution to one specific problem, so don\'t expect a full charting library.</p>\r\n<h2><a href=\"https://github.com/tsuyoshiwada/react-md-spinner\" target=\"_blank\" rel=\"noreferrer noopener\">React MD Spinner</a></h2>\r\n<p>This is a Material Design spinner component for React. You can start using it right away as it is made of 100% inline CSS and doesn\'t require any configuration. It allows you to change the color, size and animation speed and also supports Server-side rendering.</p>\r\n<h2><a href=\"https://github.com/uber/react-vis\" target=\"_blank\" rel=\"noreferrer noopener\">React Vis</a></h2>\r\n<p>React-vis is a collection of react components to render common data visualization charts. It supports multiple chart types such as line/area/bar charts, heat maps, pie and donut charts and more. React-vis is easy to setup and use and provides a set of basic building blocks for different charts that can be customized.</p>\r\n<h2><a href=\"https://github.com/mosch/react-avatar-editor\" target=\"_blank\" rel=\"noreferrer noopener\">React Avater Editor</a></h2>\r\n<p>This is an avatar and profile picture editor for React. It offers you a fast and easy way to resize, crop and rotate your uploaded images using the user interface. The result images have the same resolution as the original ones, without losing any quality.</p>\r\n<h2><a href=\"https://github.com/STRML/react-grid-layout\" target=\"_blank\" rel=\"noreferrer noopener\">React-Grid-Layout</a></h2>\r\n<p>This is a draggable and resizable grid layout system. It is React-only- no jQuery required and is compatible with server-rendered apps. React-Grid-Layout supports draggable, resizable and static widgets, responsive breakpoints and much more.</p>\r\n<h2><a href=\"https://github.com/AdeleD/react-paginate\" target=\"_blank\" rel=\"noreferrer noopener\">React Paginate</a></h2>\r\n<p>A React component for creating paginations. It is easy to use and can be customized with CSS. With the built in properties you can set the number of the pages to be shown, the range of the displayed pages, add labels for the <strong>previous</strong> and <strong>next</strong> buttons and more.</p>','2019-07-07 14:03:55','React is one of the most popular front-end JavaScript libraries. Developed by Facebook, it allows you to break down even the most complex user interfaces into simple, reusable components.',0,0,'2019-07-07 14:04:30','15 Awesome React Components ','2019-07-07 14:03:55',4,3,3,0),(11,'<h1 class=\"article__title\">CSS Grid VS Flexbox: A Practical Comparison</h1>\r\n<p>Not too long ago, the layout for all HTML pages was done via tables, floats, and other CSS properties that were not well suited for styling complex web pages.</p>\r\n<p>Then came <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\" target=\"_blank\" rel=\"noreferrer noopener\">flexbox</a> - a layout mode that was specifically designed for creating robust responsive pages. Flexbox made it easy to properly align elements and their content, and is now the preferred CSS system of most web developers.</p>\r\n<p>Now we have a new contender for the best-system-to-build-html-layouts trophy (trophy title is a work in progress). It is the mighty <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noreferrer noopener\">CSS Grid</a>, and by the end of this month, it will be available natively in <a href=\"https://hacks.mozilla.org/2017/03/firefox-52-introducing-web-assembly-css-grid-and-the-grid-inspector/\" target=\"_blank\" rel=\"noreferrer noopener\">Firefox 52</a> and <a href=\"https://developers.google.com/web/updates/2017/03/nic57\" target=\"_blank\" rel=\"noreferrer noopener\">Chrome 57</a>, with other browsers (hopefully) following soon.</p>\r\n<h2>A Basic Layout Test</h2>\r\n<p>To get a sense of what it\'s like to build layouts with each system, we\'ve build the same HTML page twice - once with flexbox, and another time with the CSS grid. You can download both projects from the <strong>Download</strong> button near the top of the article, or inspect them in this online demo:</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2017/03/html-layout.png\" alt=\"html-layout.png\" /></p>\r\n<p>Â </p>\r\n<p>The design is pretty basic - it consists of a centered container, inside of which we have a header, main section, sidebar, and a footer. Here are the main \"challenges\" that we\'ll have to solve, while keeping CSS and HTML as clean as possible:</p>\r\n<ol>\r\n<li>Position the four major sections of the layout.</li>\r\n<li>Make the page responsive (the sidebar goes below the main content on smaller screens).</li>\r\n<li>Align the contents of the header - navigation to the left, button to the right.</li>\r\n</ol>\r\n<p>As you can see, for the sake of the comparison we\'ve kept everything very simple. Let\'s start with problem number one.</p>\r\n<h2>Challenge 1: Position The Page Sections</h2>\r\n<h3>Flexbox Solution</h3>\r\n<p>We\'ll start off with the flexbox solution. We add <code>display: flex</code> to the container and direction its children vertically. This will position all the sections one under another.</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-class\">.container</span> {\r\n    <span class=\"hljs-attribute\">display</span>: flex;\r\n    <span class=\"hljs-attribute\">flex-direction</span>: column;\r\n}</pre>\r\n<p>Now we need to make the main section and the sidebar stand next to each other. Since flex containers are generally one-directional, we will need to add a wrapper element.</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">header</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">header</span>></span>\r\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"main-and-sidebar-wrapper\"</span>></span>\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"main\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">section</span>></span>\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">aside</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"sidebar\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">aside</span>></span>\r\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">footer</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">footer</span>></span></pre>\r\n<p>We then make the wrapper <code>display:flex</code> and <code>flex-direction</code> it in the opposite direction.</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-class\">.main-and-sidebar-wrapper</span> {\r\n    <span class=\"hljs-attribute\">display</span>: flex;\r\n    <span class=\"hljs-attribute\">flex-direction</span>: row;\r\n}</pre>\r\n<p>The last step is to set the size of the main section and the sidebar. We want the main content to be three times the size of the sidebar, which isn\'t hard to do with <code>flex</code> or percentages.</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-class\">.main</span> {\r\n    <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">3</span>;\r\n    <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">60px</span>;\r\n}\r\n<span class=\"hljs-selector-class\">.sidebar</span> {\r\n   <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>;\r\n}</pre>\r\n<p>As you can see flexbox did pretty well, but we still needed quite a lot of CSS properties + an additional HTML element. Let\'s see how the CSS grid will do.</p>\r\n<h3>CSS Grid Solution</h3>\r\n<p>There are a couple of different ways to use the CSS grid, but we will go with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas\" target=\"_blank\" rel=\"noreferrer noopener\">grid-template-areas</a> syntax, as it seems most suitable for what we are trying to accomplish.</p>\r\n<p>First we will define four <code>grid-area</code>-s, one for each page section:</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">header</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">header</span>></span>\r\n<span class=\"hljs-comment\"><!-- Notice there isn\'t a wrapper this time --></span>\r\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"main\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">section</span>></span>\r\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">aside</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"sidebar\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">aside</span>></span>\r\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">footer</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">footer</span>></span></pre>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-tag\">header</span> {\r\n    <span class=\"hljs-attribute\">grid-area</span>: header;\r\n}\r\n<span class=\"hljs-selector-class\">.main</span> {\r\n    <span class=\"hljs-attribute\">grid-area</span>: main;\r\n}\r\n<span class=\"hljs-selector-class\">.sidebar</span> {\r\n    <span class=\"hljs-attribute\">grid-area</span>: sidebar;\r\n}\r\n<span class=\"hljs-selector-tag\">footer</span> {\r\n    <span class=\"hljs-attribute\">grid-area</span>: footer;\r\n}</pre>\r\n<p>Then we can set up our grid and assign the placement of each area. The code below may seem quite complicated at first, but once you get to know the grid system it becomes really easy to grasp.</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-class\">.container</span> {\r\n    <span class=\"hljs-attribute\">display</span>: grid;\r\n\r\n    <span class=\"hljs-comment\">/*  Define the size and number of columns in our grid. \r\n    The fr unit works similar to flex:\r\n    fr columns will share the free space in the row in proportion to their value.\r\n    We will have 2 columns - the first will be 3x the size of the second.  */</span>\r\n    <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">3</span>fr <span class=\"hljs-number\">1</span>fr;\r\n\r\n    <span class=\"hljs-comment\">/*  Assign the grid areas we did earlier to specific places on the grid. \r\n        First row is all header.\r\n        Second row is shared between main and sidebar.\r\n        Last row is all footer.  */</span>\r\n    <span class=\"hljs-attribute\">grid-template-areas</span>: \r\n        <span class=\"hljs-string\">\"header header\"</span>\r\n        <span class=\"hljs-string\">\"main sidebar\"</span>\r\n        <span class=\"hljs-string\">\"footer footer\"</span>;\r\n\r\n    <span class=\"hljs-comment\">/*  The gutters between each grid cell will be 60 pixels. */</span>\r\n    <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">60px</span>;\r\n}</pre>\r\n<p>And that\'s it! Our layout will now follow the above structure, and because of the way we\'ve set it up we don\'t even have to deal with any margins or paddings.</p>\r\n<h2>Challenge 2: Make Page Responsive</h2>\r\n<h3>Flexbox Solution</h3>\r\n<p>The execution of this step is strongly connected to the previous one. For the flexbox solution we will have to change the <code>flex-direction</code> of the wrapper, and adjust some margins.</p>\r\n<pre class=\"css hljs\" data-type=\"css\">@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">600px</span>) {\r\n    <span class=\"hljs-selector-class\">.main-and-sidebar-wrapper</span> {\r\n        <span class=\"hljs-attribute\">flex-direction</span>: column;\r\n    }\r\n\r\n    <span class=\"hljs-selector-class\">.main</span> {\r\n        <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">60px</span>;\r\n    }\r\n}</pre>\r\n<p>Our page is really simple so there isn\'t much to rework in the media query, but in a more complex layout there will be lots and lots of stuff to redefine.</p>\r\n<h3>CSS Grid Solution</h3>\r\n<p>Since we already have the <code>grid-areas</code> defined, we just need to reorder them in a media-query. We can use the same column setup.</p>\r\n<pre class=\"css hljs\" data-type=\"css\">@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">600px</span>) {\r\n    <span class=\"hljs-selector-class\">.container</span> {\r\n    <span class=\"hljs-comment\">/*  Realign the grid areas for a mobile layout. */</span>\r\n        <span class=\"hljs-attribute\">grid-template-areas</span>: \r\n            <span class=\"hljs-string\">\"header header\"</span>\r\n            <span class=\"hljs-string\">\"main main\"</span>\r\n            <span class=\"hljs-string\">\"sidebar sidebar\"</span>\r\n            <span class=\"hljs-string\">\"footer footer\"</span>;\r\n    }\r\n}</pre>\r\n<p>Or, we can redefine the entire layout from scratch if we think that\'s a cleaner solution.</p>\r\n<pre class=\"css hljs\" data-type=\"css\">@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">600px</span>) {\r\n    <span class=\"hljs-selector-class\">.container</span> {\r\n        <span class=\"hljs-comment\">/*  Redefine the grid into a single column layout. */</span>\r\n        <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">1</span>fr;\r\n        <span class=\"hljs-attribute\">grid-template-areas</span>: \r\n            <span class=\"hljs-string\">\"header\"</span>\r\n            <span class=\"hljs-string\">\"main\"</span>\r\n            <span class=\"hljs-string\">\"sidebar\"</span>\r\n            <span class=\"hljs-string\">\"footer\"</span>;\r\n    }\r\n}</pre>\r\n<h2>Challenge 3: Align Header Components</h2>\r\n<h3>Flexbox Solution</h3>\r\n<p>Our header includes some links for navigation and a button. We want the nav to be on the left and the button on the right. The links inside the nav have to be aligned properly next to each other.</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">header</span>></span>\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">nav</span>></span>\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span><span class=\"hljs-tag\"><<span class=\"hljs-name\">h1</span>></span>Logo<span class=\"hljs-tag\"></<span class=\"hljs-name\">h1</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">li</span>></span>\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Link<span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">li</span>></span>\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>></span>Link<span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">li</span>></span>\r\n    <span class=\"hljs-tag\"></<span class=\"hljs-name\">nav</span>></span>\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">button</span>></span>Button<span class=\"hljs-tag\"></<span class=\"hljs-name\">button</span>></span>\r\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">header</span>></span></pre>\r\n<p>We\'ve already done a similar layout with flexbox in one of our older articles - <a href=\"https://tutorialzine.com/2016/02/quick-tip-easiest-way-to-make-responsive-headers/\" target=\"_blank\" rel=\"noreferrer noopener\">The Easiest Way To Make Responsive Headers</a>. The technique is really simple:</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-tag\">header</span> {\r\n    <span class=\"hljs-attribute\">display</span>: flex;\r\n    <span class=\"hljs-attribute\">justify-content</span>: space-between;\r\n}</pre>\r\n<p>Now the navigation list and the button are properly aligned. All that is left is to make the items inside the <code><nav></code> go horizontally. It\'s easiest to use <code>display: inline-block</code> here, but since we are going full flexbox, let\'s apply a flexbox-only solution:</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-tag\">header</span> <span class=\"hljs-selector-tag\">nav</span> {\r\n    <span class=\"hljs-attribute\">display</span>: flex;\r\n    <span class=\"hljs-attribute\">align-items</span>: baseline;\r\n}</pre>\r\n<p>Only two lines! Not bad at all. Let\'s see how CSS grid handles it.</p>\r\n<h3>CSS Grid Solution</h3>\r\n<p>To split the nav and the button we will have to make the header <code>display: grid</code> and set up a 2-column grid. We will also need two extra lines of CSS to position them at the respective borders.</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-tag\">header</span>{\r\n    <span class=\"hljs-attribute\">display</span>: grid;\r\n    <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">1</span>fr <span class=\"hljs-number\">1</span>fr;\r\n}\r\n<span class=\"hljs-selector-tag\">header</span> <span class=\"hljs-selector-tag\">nav</span> {\r\n    <span class=\"hljs-attribute\">justify-self</span>: start;\r\n}\r\n<span class=\"hljs-selector-tag\">header</span> <span class=\"hljs-selector-tag\">button</span> {\r\n    <span class=\"hljs-attribute\">justify-self</span>: end;\r\n}</pre>\r\n<p>As for the inline links inside the navigation - we couldn\'t get it quite right with CSS grid. Here is how our best try looks:</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2017/03/css-grid-header.png\" alt=\"\" /></p>\r\n<p>Â </p>\r\n<p>The links are inline but they can\'t be properly aligned, since there isn\'t a <code>baseline</code> option like in flexbox\'s <code>align-items</code>. We also had to define yet another subgrid.</p>\r\n<pre class=\"css hljs\" data-type=\"css\"><span class=\"hljs-selector-tag\">header</span> <span class=\"hljs-selector-tag\">nav</span> {\r\n    <span class=\"hljs-attribute\">display</span>: grid;\r\n    <span class=\"hljs-attribute\">grid-template-columns</span>: auto <span class=\"hljs-number\">1</span>fr <span class=\"hljs-number\">1</span>fr;\r\n    <span class=\"hljs-attribute\">align-items</span>: end; \r\n}</pre>\r\n<p>It\'s clear that the CSS grid struggled with this part of the layout, but that isn\'t too surprising - it\'s focus is on aligning containers, not so much the content inside them. It just isn\'t meant for doing finishing touches.</p>\r\n<h2>Conclusion</h2>\r\n<p>If you\'ve made it through the whole article (in which case great job!), the conclusion shouldn\'t come as a surprise to you. The truth is, there isn\'t a <em>better</em> system - both flexbox and the CSS grid are good at different things and should be used <strong>together</strong>, not as alternatives to one another.</p>\r\n<p>For those of you who skip directly to the conclusion of articles (no worries, we do it too), here is a summary of the comparison:</p>\r\n<ul>\r\n<li>CSS grids are great for building the bigger picture. They makes it really easy to manage the layout of the page, and can even handle more unorthodox and asymmetrical designs.</li>\r\n<li>Flexbox is great at aligning the content inside elements. Use flex to position the smaller details of a design.</li>\r\n<li>Use CSS grids for 2D layouts (rows AND columns).</li>\r\n<li>Flexbox works better in one dimension only (rows OR columns).</li>\r\n<li>There is no reason to use only CSS grids or only flexbox. Learn both and use them together.</li>\r\n</ul>','2019-07-07 14:23:24','Flexbox made it easy to properly align elements and their content and is now the preferred CSS system of most web developers.',0,0,'2019-07-07 14:23:43','CSS Grid VS Flexbox A Practical Comparison ','2019-07-07 14:23:24',5,5,3,0),(12,'<h1 class=\"article__title\">Freebie: 4 Bootstrap Gallery Templates</h1>\r\n<p>In this post we would like to share with you 4 awesome image gallery templates for <a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Bootstrap 3</a>. Just like all our <a href=\"https://tutorialzine.com/tag/freebie/\" target=\"_blank\" rel=\"noreferrer noopener\">freebies</a>, these templates are completely free to use (no attribution required), fully responsive, and super easy to implement - just copy and paste!</p>\r\n<h2>The Templates</h2>\r\n<p>The four templates use the Bootstrap 3 <a href=\"http://getbootstrap.com/css/#grid\" target=\"_blank\" rel=\"noreferrer noopener\">grid</a> for their layouts. The HTML is fully compliant with the framework and follows the recommended practices. For styling we\'ve used good ol\' CSS, while making sure to keep it self contained so it won\'t mess up the rest of your styles.</p>\r\n<p>Each template has unique CSS-only hover effects, as well as Lightbox functionality thanks to the <a href=\"https://github.com/feimosi/baguetteBox.js\" target=\"_blank\" rel=\"noreferrer noopener\">baguetteBox.js</a> plugin. There are many other Lightbox libraries out there but we chose that one because of the cool name (although it having no dependencies and being super easy to use were taking into account as well).</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2017/02/baguettebox.jpg\" alt=\"baguettebox.jpg\" /></p>\r\n<h2>How to use</h2>\r\n<p>To use any of the templates from the <a href=\"https://demo.tutorialzine.com/2017/02/freebie-4-bootstrap-gallery-templates/\" target=\"_blank\" rel=\"noreferrer noopener\">demo</a>, follow these simple steps:</p>\r\n<ol>\r\n<li>Grab the zip archive from the <strong>Download</strong> button near the top of the page and extract it.</li>\r\n<li>There are separate folders for each template + a folder of placeholder images (courtesy to <a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Unsplash</a>). Decide which template you want and grab it\'s HTML from the <code>.tz-gallery</code> element in the <strong>index.html</strong> file</li>\r\n<li>Paste the HTML into your project. Make sure you have <a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Bootstrap 3</a> on that page.</li>\r\n<li>The styles are located in separate CSS files for each design. Link to the CSS file or copy its contents and add them to your styles.</li>\r\n<li>For the Lightbox effect add the <a href=\"https://github.com/feimosi/baguetteBox.js\" target=\"_blank\" rel=\"noreferrer noopener\">baguetteBox</a> CSS and JS, and initialize it in a script tag - <code>baguetteBox.run(\'.tz-gallery\');</code>.</li>\r\n</ol>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2017/02/fluid-gallery-1.jpg\" alt=\"fluid-gallery-1.jpg\" /></p>\r\n<h2>Free for Commercial Use</h2>\r\n<p>You have all rights to customize and use these templates in both personal and commercial projects. All our <a href=\"https://tutorialzine.com/tag/freebie/\" target=\"_blank\" rel=\"noreferrer noopener\">freebies</a> are 100% royalty free, no attribution required (<a href=\"https://tutorialzine.com/license/\" target=\"_blank\" rel=\"noreferrer noopener\">our license page</a>). Enjoy</p>','2019-07-07 14:48:53','In this post, we would like to share with you 4 awesome image gallery templates for Bootstrap 3. Just like all our freebies, these templates are completely free to use, fully responsive, and super easy to implement - just copy and paste!',0,0,'2019-07-07 14:49:32','Freebie 4 Bootstrap Gallery Templates ','2019-07-07 14:48:53',4,5,1,0),(13,'<h1 class=\"article__title\">30 Learning Resources For Mastering Angular 2</h1>\r\n<p>Angular 2 is a vast and complex framework with a never ending learning curve. To help you grasp more of its many features, we\'ve curated a list of 30 free learning resources that cover it all - from the quickstart guide to specific details and best practices</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/09/1_official.png\" alt=\"tut1\" /></p>\r\n<p>Let\'s first quickly go over the available guides and tutorials on the official Angular website. There are a bunch of different resources there and we decided it\'s a good idea to explain them.</p>\r\n<h2><a href=\"https://angular.io/docs/ts/latest/quickstart.html\" target=\"_blank\" rel=\"noreferrer noopener\">QuickStart (TypeScript version)</a></h2>\r\n<p>Angular2 apps can be written in TypeScript, Dart, or good ol\' vanilla JavaScript. There are separate versions of the official docs for each language, but the TypeScript one is by far most detailed, as this is the recommended technology to use.</p>\r\n<p>This will be the starting point for most beginners to Angular2. It includes setting up a work environment and running a basic Hello World app. Don\'t be fooled by its name, you will need a good hour or two to finish this QuickStart.</p>\r\n<h2><a href=\"https://angular.io/docs/js/latest/quickstart.html\" target=\"_blank\" rel=\"noreferrer noopener\">QuickStart (Vanilla JavaScript version)</a></h2>\r\n<p>A much simpler version of the TypeScript QuickStart. Since it is written for vanilla JavaScript this tutorial doesn\'t require a complex work environment and setup, so it goes straight to the framework itself and some of it\'s main concepts.</p>\r\n<h2><a href=\"https://angular.io/docs/ts/latest/tutorial/index.html\" target=\"_blank\" rel=\"noreferrer noopener\">Tour of Heroes</a></h2>\r\n<p>Tour of heroes is a much more detailed tutorial than the QuickStart. It goes through the process of building a Single Page App, step by step, covering many of the must-know Angular2 features. There are TypeScript and Dart versions, but no vanilla JS.</p>\r\n<h2><a href=\"https://angular.io/docs/ts/latest/guide/ngmodule.html\" target=\"_blank\" rel=\"noreferrer noopener\">Advanced Documentation</a></h2>\r\n<p>Here the Angular team offers over 15 standalone tutorials, each doing a very in-depth look into an important topic. You can learn about Angular animations, the lifecycle of components, the navigation router, and many other core features.</p>\r\n<h2><a href=\"https://angular.io/docs/ts/latest/cookbook/\" target=\"_blank\" rel=\"noreferrer noopener\">Cookbook</a></h2>\r\n<p>A collection of code snippets and quick solutions to common challenges. Here you can find a chart of the differences between Angular 1 and 2, a FAQ section on NgModules, and solutions for form validation among other helpful tips and guides.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/09/2_Tutorials.png\" alt=\"tut2\" /></p>\r\n<p>Now let\'s look at some tutorials and articles written by the community. We\'ve tried to include only publications that are fairly new, making them compatible with the changes in recent versions.</p>\r\n<h2><a href=\"http://blog.thoughtram.io/angular/2015/10/24/upgrading-apps-to-angular-2-using-ngupgrade.html\" target=\"_blank\" rel=\"noreferrer noopener\">Upgrading Apps To Angular 2 Using ngUpgrade</a></h2>\r\n<p>A well-written article that covers everything you need to know about upgrading old Angular 1 apps to the new framework. In it you can see what Angular2 does better, which aspects of an app need the most radical changes, as well as practical code snippets to get the job done.</p>\r\n<h2><a href=\"http://blog.angular-university.io/angular2-router/\" target=\"_blank\" rel=\"noreferrer noopener\">Router Introduction: Child Routes, Auxiliary Routes, Common Pitfalls</a></h2>\r\n<p>This tutorial focuses on the new 3.0 router component, and explains the whole process needed for configuring it correctly. The author has done a great job explaining what Single Page Apps are, how they work, and how to route them in a robust and secure way.</p>\r\n<h2><a href=\"http://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/\" target=\"_blank\" rel=\"noreferrer noopener\">Ahead-of-Time Compilation</a></h2>\r\n<p>The new Angular2 compiler improves the performance of applications dramatically by taking full advantage of JavaScript Virtual Machines. In this blog post you can learn about Just-in-Time and Ahead-of-Time compilation, their pros and cons, and how to implement them.</p>\r\n<h2><a href=\"http://blog.thoughtram.io/angular/2015/06/25/styling-angular-2-components.html\" target=\"_blank\" rel=\"noreferrer noopener\">Styling Angular 2 Components</a></h2>\r\n<p>A more beginner-oriented lesson looking at different techniques for adding CSS styles to components. It shows you how to use component inline styles, style urls, and template inline styles, and explains the advantages behind each one.</p>\r\n<h2><a href=\"http://www.syntaxsuccess.com/viewarticle/web-workers-in-angular-2.0\" target=\"_blank\" rel=\"noreferrer noopener\">Web Workers In Angular 2</a></h2>\r\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noreferrer noopener\">Web workers</a> are great for doing asynchronous tasks that don\'t block the UI JavaScript, something very important for Single Page Apps. Here you can learn how to run Angular apps or components as web workers, allowing them to function in the background, independent from the main app thread.</p>\r\n<h2><a href=\"https://vsavkin.com/angular-router-declarative-lazy-loading-7071d1f203ee\" target=\"_blank\" rel=\"noreferrer noopener\">Angular Router: Declarative Lazy Loading</a></h2>\r\n<p>Angular apps tend to get really big, and at some point the source files become too large to be loaded at once. Lazy loading allows us to speed up application load time by splitting it into multiple bundles, and loading them on demand.</p>\r\n<h2><a href=\"http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html\" target=\"_blank\" rel=\"noreferrer noopener\">Dependency Injection In Angular 2</a></h2>\r\n<p>A deep dive into the greatly improved Angular2 dependency injection system and the different approaches behind the old and new DI. This article also has a <a href=\"http://blog.thoughtram.io/angular/2015/08/20/host-and-visibility-in-angular-2-dependency-injection.html\" target=\"_blank\" rel=\"noreferrer noopener\">second part</a>, that further explains the host-child relationship and the visibility of dependencies.</p>\r\n<h2><a href=\"http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/\" target=\"_blank\" rel=\"noreferrer noopener\">How does Angular 2 Change Detection Really Work ?</a></h2>\r\n<p>The Angular2 change detection mechanism is much more transparent and easier to reason about than its equivalent in Angular 1. However, there are still situations where you need to know exactly whats going on under hood.</p>\r\n<h2><a href=\"http://blog.mgechev.com/2016/06/26/tree-shaking-angular2-production-build-rollup-javascript/\" target=\"_blank\" rel=\"noreferrer noopener\">Building an Angular 2 Application for Production</a></h2>\r\n<p>Angular is a very powerful and complex framework, and it\'s not surprising that it\'s footprint is also quite large. In this blog post you can learn various techniques, such as Tree-shaking and minification, that will drastically reduce the size of your final app.</p>\r\n<h2><a href=\"http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html\" target=\"_blank\" rel=\"noreferrer noopener\">Taking Advantage Of Observables In Angular 2</a></h2>\r\n<p>Observables in Angular 2 can be used for handling asynch code as an alternative to Promises. They are a vast and complex topic, but this <a href=\"http://blog.thoughtram.io/angular/2016/01/07/taking-advantage-of-observables-in-angular2-pt2.html\" target=\"_blank\" rel=\"noreferrer noopener\">two-part</a> tutorial does a great job of introducing them and showcasing their many use cases.</p>\r\n<h2><a href=\"http://orizens.com/wp/topics/angular-2-communication-between-components-components-design/\" target=\"_blank\" rel=\"noreferrer noopener\">Communication Between Components & Components Design</a></h2>\r\n<p>An interesting take on design patterns for building Angular components. The article goes through the components of a YouTube music player app and the relationships between them, with lots of code examples and explanations.</p>\r\n<h2><a href=\"http://www.syntaxsuccess.com/viewarticle/optimizing-ngupgrade-bundle-sizes-in-angular-2\" target=\"_blank\" rel=\"noreferrer noopener\">Optimizing NgUpgrade Bundle Sizes</a></h2>\r\n<p>NgUpgrade is meant to bridge the gap between Angular 1 and 2 by allowing code from both frameworks to co-exist in the same app. This can greatly increase the size as both versions need to be included. You can learn how to reduce that extra footprint in this quick tip.</p>\r\n<h2><a href=\"https://vsavkin.com/three-ways-to-test-angular-2-components-dcea8e90bd8d#.v7nq9ahqv\" target=\"_blank\" rel=\"noreferrer noopener\">Three Ways to Test Angular 2 Components</a></h2>\r\n<p>In this article you will learn three different techniques that you can use to thoroughly test Angular 2 components. They are isolated testing, shallow testing, and integration testing. All three have their strengths and weaknesses and are best applied in certain scenarios.</p>\r\n<h2><a href=\"http://blog.thoughtram.io/angular/2016/07/18/guards-in-angular-2.html\" target=\"_blank\" rel=\"noreferrer noopener\">Protecting Routes Using Guards</a></h2>\r\n<p>Protecting routes is a very common task when building applications, as we want to prevent our users from accessing areas that theyâre not allowed to access. Angular 2âs router provides a feature called Guards that tries to solve exactly that problem.</p>\r\n<h2><a href=\"http://tutorials.pluralsight.com/front-end-javascript/debugging-angular-2-applications\" target=\"_blank\" rel=\"noreferrer noopener\">Debugging Angular 2 Applications</a></h2>\r\n<p>This guide gives a comprehensive overview of the various ways you can debug an Angular 2 applications using tools such as the Chrome DevTools, <a href=\"https://augury.angular.io/\" target=\"_blank\" rel=\"noreferrer noopener\">Angular Augury</a>, simple JSON pipe filters, and the console itself.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/09/3_Videos.png\" alt=\"tut3\" /></p>\r\n<p>Since we know many developers prefer interactive lessons, here are a couple of places where you can find excellent code walkthroughs and general Angular talks.</p>\r\n<h2><a href=\"https://egghead.io/technologies/angular2\" target=\"_blank\" rel=\"noreferrer noopener\">Egghead.io</a></h2>\r\n<p>Egghead.io is one of the most popular and recommended sources for learning Angular. Although many of the lessons are for pro members only, there are still lots and lots of awesome free lessons you can watch.</p>\r\n<h2><a href=\"https://devchat.tv/adv-in-angular\" target=\"_blank\" rel=\"noreferrer noopener\">Adventures in Angular</a></h2>\r\n<p>Adventures in Angular is a weekly podcast dedicated to the Angular framework. The panel cover a wide array of topics and it\'s probably the best place to get Angular news. The archive contains over 110 episodes, each at least 30 minutes long.</p>\r\n<h2><a href=\"https://www.youtube.com/watch?v=_-CD_5YhJTA\" target=\"_blank\" rel=\"noreferrer noopener\">Angular 2 from Scratch</a></h2>\r\n<p>Awesome one-hour-long course covering most of the basics. Although its beginner-oriented there are lots of things everyone can learn from this video in therms of project management and workflow.</p>\r\n<h2><a href=\"https://www.youtube.com/user/ajdto234/featured\" target=\"_blank\" rel=\"noreferrer noopener\">Ajden Towfeek</a></h2>\r\n<p>A YouTube channel with lots of screencasts on web development and programming, with a focus on Angular 2 and its ecosystem of related technologies, tools, and languages.</p>\r\n<h2><a href=\"https://www.youtube.com/channel/UC3cEGKhg3OERn-ihVsJcb7A/featured\" target=\"_blank\" rel=\"noreferrer noopener\">Angular University</a></h2>\r\n<p>Another YouTube channel with a large collection of Angular tutorials, courses, code examples, and quick-tips.<img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/09/4_Other_.png\" alt=\"tut4\" /></p>\r\n<p>Last but not least, here are some resources that didn\'t fit any of the above categories, but can still be essential learning tools for any Angular developer.</p>\r\n<h2><a href=\"https://www.gitbook.com/book/rangle-io/ngcourse2/details\" target=\"_blank\" rel=\"noreferrer noopener\">Rangle\'s Angular 2 Training Book</a></h2>\r\n<p>The only completely free book on Angular 2 that we could find. It covers the most important Angular 2 topics, from getting started with the basic toolchain, to writing applications in a scalable and maintainable manner. You can read it in the web browser or download it as an eBook (PDF, Mobi, ePub).</p>\r\n<h2><a href=\"https://tutorialzine.com/2016/07/learn-typescript-in-30-minutes/\" target=\"_blank\" rel=\"noreferrer noopener\">TypeScript in 30 Minutes</a></h2>\r\n<p>Although you can technically write Angular 2 in vanilla JavaScript or Dart, TypeScript provides by far the best experience with the framework. Using this tutorial you can get started with the language and learn most of it\'s important features.</p>\r\n<h2><a href=\"https://angular.io/docs/ts/latest/guide/style-guide.html\" target=\"_blank\" rel=\"noreferrer noopener\">Style Guide</a></h2>\r\n<p>The offical style guide for the framework. Contains a ton of syntax and formatting recommendations, as well as general best practices. It\'s very detailed and long, but knowing Angular\'s enterprise nature, you\'ll probably need to go through it at some point.</p>\r\n<h2><a href=\"http://angularexpo.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Angular Expo</a></h2>\r\n<p>Learn from other people\'s experiences with the framework by checking out this large collection of open-source applications and experiments, all developed in Angular 2.</p>\r\n<h2><a href=\"http://juristr.com/blog/2016/09/ng2-released/\" target=\"_blank\" rel=\"noreferrer noopener\">Angular 2 Final Q&A</a></h2>\r\n<p>An interview and Q&A with the creators of the framework, right after the release of Angular 2 Final. A great place to hear more about the project and its upcoming features straight from the horses mouth.</p>','2019-07-07 15:20:29','Angular 2 is a vast and complex framework with a never-ending learning curve. To help you grasp more of its many features, we\'ve curated a list of 30 free learning resources that cover it all.',0,1,'2019-07-07 15:21:07','30 Learning Resources For Mastering Angular 2 ','2019-07-07 15:20:29',4,3,3,0),(14,'<h1 class=\"article__title\">Building Your First App With Vue.js</h1>\r\n<p>Today we\'re going to exercise our <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Vue.js</a> skills by building a simple app for browsing reddit posts. We\'re going to construct the whole thing from scratch to demonstrate just how easy it is to create user interfaces with a framework like Vue.</p>\r\n<p>This tutorial requires you to have at least some basic knowledge of JavaScript and Vue.js. If you aren\'t familiar with Vue.js at all, we advise you to go and check out our article <a href=\"https://tutorialzine.com/2016/03/5-practical-examples-for-learning-vue-js/\" target=\"_blank\" rel=\"noreferrer noopener\">5 Practical Examples For Learning Vue.js</a>, where we show many of the core concepts with practical code snippets.</p>\r\n<blockquote>\r\n<p>This article has been updated and now works with Vue.js v2!</p>\r\n</blockquote>\r\n<h2>The App</h2>\r\n<p>What we want from our application is simply to fetch the feed from a number of subbreddits and display them. Here is what the end result will look like:<img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/08/vue-app.png\" alt=\"vue-app\" /></p>\r\n<p>We will have six separate subreddit feeds showing five posts each. The posts have links to the content and discussion on reddit, as well as some other details. For the sake of simplicity we have omitted features such as adding/removing subreddits and doing searches, but they can be easily added on top of the existing app.</p>\r\n<h2>Setting Up The Workspace</h2>\r\n<p>You can download the full source code for the reddit browser app from the <strong>Download</strong> button near the top of the article. Before we actually look at the code, let\'s make sure that everything is setup properly. Here is an overview of the file structure:</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/08/directory.png\" alt=\"dir\" /></p>\r\n<p>As you can see it\'s quite basic: we just have one HTML file, one CSS file, a <em>script.js</em> containing our JavaScript code. We\'ve also added local copies of the <a href=\"https://vuejs.org/guide/installation.html\" target=\"_blank\" rel=\"noreferrer noopener\">Vue.js</a> and <a href=\"https://github.com/vuejs/vue-resource\" target=\"_blank\" rel=\"noreferrer noopener\">Vue-resource</a> libraries, but you can use a CDN if you prefer</p>\r\n<p>Thankfully, Vue.js doesn\'t require any special configuration, so it should work straight out of the box. To start the app we just have to create a global Vue instance:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-keyword\">new</span> Vue({\r\n    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#main\'</span>\r\n});</pre>\r\n<p>The only thing left to do now is start a local web server to enable cross-origin AJAX requests to the reddit API. The easiest way to do this on OS X/Ubuntu is by running the following command from the project\'s directory:</p>\r\n<pre class=\"hljs nginx\" data-type=\"plain\"><span class=\"hljs-attribute\">python</span> -m SimpleHTTPServer <span class=\"hljs-number\">8080</span></pre>\r\n<p>If everything is done properly our project should be available at <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noreferrer noopener\">localhost:8080</a>.</p>\r\n<h2>Creating Custom Components</h2>\r\n<p>Our app is going to need two reusable components - one for the <strong>Posts</strong>, and another for <strong>Subreddits</strong>. The two components will be in a Child-Parent relationship, meaning that the Subreddit component will have multiple Posts nested in it.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/08/components-1.png\" alt=\"comp\" /></p>\r\n<p>Let\'s start with the Subreddit component, and more specifically it\'s JavaScript:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-comment\">// Parent | Subreddit component containing a list of \'post\' components. </span>\r\n<span class=\"hljs-keyword\">var</span> subreddit = Vue.component(<span class=\"hljs-string\">\'subreddit\'</span>,{\r\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">\'#subreddit\'</span>,\r\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\'name\'</span>],\r\n\r\n    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> () </span>{\r\n        <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">posts</span>: [] }\r\n    },\r\n\r\n    <span class=\"hljs-attr\">created</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>()</span>{\r\n        <span class=\"hljs-keyword\">this</span>.$http.get(<span class=\"hljs-string\">\"https://www.reddit.com/r/\"</span>+ <span class=\"hljs-keyword\">this</span>.name +<span class=\"hljs-string\">\"/top.json?limit=5\"</span>)\r\n        .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resp</span>)</span>{\r\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> resp.data == <span class=\"hljs-string\">\'string\'</span>) {\r\n               resp.data = <span class=\"hljs-built_in\">JSON</span>.parse(resp.data);\r\n            }\r\n            <span class=\"hljs-keyword\">this</span>.posts=resp.data.data.children;\r\n        });\r\n    }\r\n});</pre>\r\n<p>Here we define the new component under the name <strong>subreddit</strong>. In <code>props</code> we provide an array with all the parameters our component can receive - in this case it is just the name of the subbreddit we want to browse. Now if we want to add a subreddit block to the HTML we will use this markup:</p>\r\n<p>Â </p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">subreddit</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"food\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">subreddit</span>></span></pre>\r\n<p>The <code>data</code> property defines what variables are needed for each instance of the component and their default values. We will start with an empty <code>posts</code> array, and populate it in the <code>created</code> method. When a <code><subreddit></code> tag is created, Vue will take its <code>name</code> property, make a call to the reddit API to fetch the top 5 posts from the subreddit with that name, and save them in <code>this.posts</code>. For the HTTP requests we\'ve used the <a href=\"https://github.com/vuejs/vue-resource\" target=\"_blank\" rel=\"noreferrer noopener\">vue-resource</a> library instead of jQuery, since it is way tinier and automatically binds the correct context for <code>this</code>.</p>\r\n<p>After we\'ve acquired everything we need in the model, Vue.js will automatically render our Subreddit components. The actual view that the user sees is defined in a template in <em>index.html</em>:</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"subreddit\"</span>></span>\r\n\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"subreddit\"</span>></span>\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">h2</span>></span>{{ name | uppercase }}<span class=\"hljs-tag\"></<span class=\"hljs-name\">h2</span>></span>\r\n\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item-list\"</span>></span>\r\n            <span class=\"hljs-tag\"><<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"obj in posts\"</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">post</span> <span class=\"hljs-attr\">:item</span>=<span class=\"hljs-string\">\"obj\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">post</span>></span>\r\n            <span class=\"hljs-tag\"></<span class=\"hljs-name\">li</span>></span>\r\n        <span class=\"hljs-tag\"></<span class=\"hljs-name\">ul</span>></span>\r\n    <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n\r\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">template</span>></span></pre>\r\n<p>Personally, I like to wrap all the elements of a component in a <code>div</code> container. This makes them easier to style and also seems more semantic (to me at least). Inside that container we have a title that goes through an uppercase filter (we will cover filters later in the article) and an unordered list iterating over the elements returned from the reddit API call.</p>\r\n<p>If you look closely at the HTML, you\'ll also notice we are using a <code><post></code> tag. This isn\'t some new fancy HTML element - it\'s our child component!</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-comment\">// Child | Componenet represiting a single post.</span>\r\n<span class=\"hljs-keyword\">var</span> post = Vue.component(<span class=\"hljs-string\">\'post\'</span>, {\r\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">\"#post\"</span>,\r\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\'item\'</span>],\r\n    <span class=\"hljs-attr\">methods</span>: {\r\n        <span class=\"hljs-attr\">getImageBackgroundCSS</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">img</span>) </span>{\r\n            <span class=\"hljs-keyword\">if</span>(img && img!=<span class=\"hljs-string\">\'self\'</span> && img!=<span class=\"hljs-string\">\'nsfw\'</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'background-image: url(\'</span> + img + <span class=\"hljs-string\">\')\'</span>;    \r\n            }\r\n            <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'background-image: url(assets/img/placeholder.png)\'</span>; \r\n            }\r\n        }       \r\n    }\r\n});</pre>\r\n<p>Post components will expect a object called <code>item</code> containing all of the information about a single post on reddit - things like title, URLs, number of comments, etc. As we saw earlier, this is done in a <code>v-for</code> loop inside the Subreddit (parent) component:</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"obj in posts\"</span>></span>\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">post</span> <span class=\"hljs-attr\">:item</span>=<span class=\"hljs-string\">\"obj\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">post</span>></span>\r\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">li</span>></span></pre>\r\n<p>The colon prefixing <code>:item=\"obj\"</code> is very important. It tells Vue that we are proving a JavaScript object called <em>obj</em> (as opposed to the string <code>\"obj\"</code>), allowing us to pass the data from the <code>v-for</code>.</p>\r\n<p>Now that we have all the needed properties for a post, we can display them.</p>\r\n<pre class=\"html hljs xml\" data-type=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"post\"</span>></span>\r\n\r\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"post\"</span>></span>\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span>   <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">\"item.data.url\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"getImageBackgroundCSS(item.data.thumbnail)\"</span> \r\n             <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"thumbnail\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span>\r\n\r\n        <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"details\"</span>></span>\r\n            <span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">\"item.data.url\"</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">\"item.data.title\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>></span>\r\n                {{ item.data.title | truncate}}\r\n            <span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span>          \r\n\r\n            <span class=\"hljs-tag\"><<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"action-buttons\"</span>></span>\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://reddit.com{{ item.data.permalink }}\"</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"Vote\"</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"material-icons\"</span>></span>thumbs_up_down<span class=\"hljs-tag\"></<span class=\"hljs-name\">i</span>></span>\r\n                    {{item.data.score}}\r\n                <span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span>\r\n\r\n                <span class=\"hljs-tag\"><<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://reddit.com{{ item.data.permalink }}\"</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"Go to discussion\"</span>></span>\r\n                    <span class=\"hljs-tag\"><<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"material-icons\"</span>></span>forum<span class=\"hljs-tag\"></<span class=\"hljs-name\">i</span>></span>\r\n                    {{item.data.num_comments}}\r\n                <span class=\"hljs-tag\"></<span class=\"hljs-name\">a</span>></span>\r\n            <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n        <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n    <span class=\"hljs-tag\"></<span class=\"hljs-name\">div</span>></span>\r\n\r\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">template</span>></span></pre>\r\n<p>The above template looks scary at first, but really isn\'t. We just take the properties of the post object and display them.</p>\r\n<h2>Creating Custom Filters</h2>\r\n<p>Defining filters is quite easy. The <code>Vue.filter()</code> method provides us with the incoming string data, which we can transform whatever way we want and then simply return.</p>\r\n<p>The <code>uppercase</code> filter we mentioned earlier in the subreddit template is one of the simplest filters possible. It was actually built-into previous version of Vue but was removed in v2 along with all other text filters.</p>\r\n<p>It takes one string parameter, transforms it to uppercase and returns the result.</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\">Vue.filter(<span class=\"hljs-string\">\'uppercase\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\r\n    <span class=\"hljs-keyword\">return</span> value.toUpperCase();\r\n});</pre>\r\n<p>Our other filter takes strings and truncates them if they are too long. This is applied to the post titles, which often are way too lengthy for the design we had in mind.</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\">Vue.filter(<span class=\"hljs-string\">\'truncate\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\r\n    <span class=\"hljs-keyword\">var</span> length = <span class=\"hljs-number\">60</span>;\r\n\r\n    <span class=\"hljs-keyword\">if</span>(value.length <= length) {\r\n        <span class=\"hljs-keyword\">return</span> value;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">return</span> value.substring(<span class=\"hljs-number\">0</span>, length) + <span class=\"hljs-string\">\'...\'</span>;            \r\n    }\r\n});</pre>\r\n<h2>Further Reading</h2>\r\n<p>The main focus of this tutorial was to show the process of building a simple Vue.js app. To keep it short we haven\'t stopped to explain every tiny syntax peculiarity, but worry not! There are many awesome resources where you can learn the basics:</p>\r\n<ul>\r\n<li>The official Vue.js starting guide and docs - <a href=\"https://vuejs.org/guide/\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</li>\r\n<li>Excellent video series from Laracasts - <a href=\"https://laracasts.com/series/learning-vue-step-by-step\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</li>\r\n<li>Our very own article: 5 Practical Examples For Learning Vue.js - <a href=\"https://tutorialzine.com/2016/03/5-practical-examples-for-learning-vue-js/\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</li>\r\n</ul>\r\n<p>This concludes our Vue.js tutorial! We hope that you\'ve had lots of fun with it and that you\'ve learned a thing or two. If you have any suggestions or questions, feel free to leave a message in the comment section below :)</p>','2019-07-07 15:38:49','Today we\'re going to exercise our Vue.js skills by building a simple app for browsing Reddit posts. ',1,1,'2019-07-07 15:38:56','Building Your First App With Vue.js ','2019-07-07 15:38:49',5,3,3,0),(15,'<h1 class=\"article__title\">Learn TypeScript in 30 Minutes</h1>\r\n<p>Today we\'re going to take a look at TypeScript, a compile-to-JavaScript language designed for developers who build large and complex apps. It inherits many programming concepts from languages such as C# and Java that add more discipline and order to the otherwise very relaxed and free-typed JavaScript.</p>\r\n<p>This tutorial is aimed at people who are fairly proficient in JavaScript but are still beginners when it comes to TypeScript. We\'ve covered most of the basics and key features while including lots of examples with commented code to help you see the language in action. Let\'s begin!</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/0__benefits.png\" alt=\"typescirpt1\" /></p>\r\n<h2>The Benefits of Using TypeScript</h2>\r\n<p>JavaScript is pretty good as it is and you may wonder <em>Do I really need to learn TypeScript?</em> Technically, you do not <em>need</em> to learn TypeScript to be a good developer, most people do just fine without it. However, working with TypeScript definitely has its benefits:</p>\r\n<ul>\r\n<li>Due to the static typing, code written in TypeScript is more predictable, and is generally easier to debug.</li>\r\n<li>Makes it easier to organize the code base for very large and complicated apps thanks to modules, namespaces and strong OOP support.</li>\r\n<li>TypeScript has a compilation step to JavaScript that catches all kinds of errors before they reach runtime and break something.</li>\r\n<li>The upcoming Angular 2 framework is written in TypeScript and it\'s recommended that developers use the language in their projects as well.</li>\r\n</ul>\r\n<p>The last point is actually the most important to many people and is the main reason to get them into TypeScript. Angular 2 is one of the hottest frameworks right now and although developers can use regular JavaScript with it, a majority of the tutorials and examples are written in TS. As Angular 2 expands its community, it\'s natural that more and more people will be picking up TypeScript.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/1_Installation.png\" alt=\"installation\" /></p>\r\n<h2>Installing TypeScript</h2>\r\n<p>You will need Node.js and Npm for this tutorial. Go <a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noreferrer noopener\">here</a> if you don\'t have them installed.</p>\r\n<p>The easiest way to setup TypeScript is via <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">npm</a>. Using the command below we can install the TypeScript package globally, making the TS compiler available in all of our projects:</p>\r\n<pre class=\"hljs coffeescript\" data-type=\"plain\"><span class=\"hljs-built_in\">npm</span> install -g typescript</pre>\r\n<p>Try opening a terminal anywhere and running <code>tsc -v</code> to see if it has been properly installed.</p>\r\n<pre><span class=\"hljs-selector-tag\">tsc</span> <span class=\"hljs-selector-tag\">-v</span> <span class=\"hljs-selector-tag\">Version</span> 1<span class=\"hljs-selector-class\">.8</span><span class=\"hljs-selector-class\">.10 <br /></span></pre>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/2_text_editors.png\" alt=\"editors\" /><br /><br /></p>\r\n<h2>Text Editors With TypeScript Support</h2>\r\n<p>TypeScript is an open-source project but is developed and maintained by Microsoft and as such was originally supported only in Microsoft\'s <a href=\"https://www.visualstudio.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Visual Studio</a> platform. Nowadays, there are a lot more text editors and IDEs that either natively or through plugins offer support for the TypeScript syntax, auto-complete suggestions, error catching, and even built-in compilers.</p>\r\n<ul>\r\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Visual Studio Code</a> - Microsoft\'s other, lightweight open-source code editor. TypeScript support is built in</li>\r\n<li>Official <a href=\"https://github.com/Microsoft/TypeScript-Sublime-Plugin\" target=\"_blank\" rel=\"noreferrer noopener\">Free Plugin</a> for Sublime Text.</li>\r\n<li>The latest version of <a href=\"https://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"noreferrer noopener\">WebStorm</a> comes with built in support.</li>\r\n<li><a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support\" target=\"_blank\" rel=\"noreferrer noopener\">More</a> including Vim, Atom, Emacs and others.</li>\r\n</ul>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/3_compilation.png\" alt=\"\" /></p>\r\n<h2>Compiling to JavaScript</h2>\r\n<p>TypeScript is written in <strong>.ts</strong> files (or .tsx for JSX), which can\'t be used directly in the browser and need to be translated to vanilla .js first. This compilation process can be done in a number of different ways:</p>\r\n<ul>\r\n<li>In the terminal using the previously mentioned command line tool <code>tsc</code>.</li>\r\n<li>Directly in Visual Studio or some of the other IDEs and text editors.</li>\r\n<li>Using automated task runners such as <a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">gulp</a>.</li>\r\n</ul>\r\n<p>We found the first way to be easiest and most beginner friendly, so that\'s what we\'re going to use in our lesson</p>\r\n<p>The following command takes a TypeScript file named <em>main.ts</em> and translates it into its JavaScript version <em>main.js</em>. If <em>main.js</em> already exists it will be overwritten.</p>\r\n<pre class=\"hljs css\" data-type=\"plain\"><span class=\"hljs-selector-tag\">tsc</span> <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.ts</span></pre>\r\n<p>We can also compile multiple files at once by listing all of them or by applying wildcards:</p>\r\n<pre class=\"hljs css\" data-type=\"plain\"># <span class=\"hljs-selector-tag\">Will</span> <span class=\"hljs-selector-tag\">result</span> <span class=\"hljs-selector-tag\">in</span> <span class=\"hljs-selector-tag\">separate</span> <span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-selector-tag\">files</span>: <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-selector-tag\">worker</span><span class=\"hljs-selector-class\">.js</span>.\r\n<span class=\"hljs-selector-tag\">tsc</span> <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.ts</span> <span class=\"hljs-selector-tag\">worker</span><span class=\"hljs-selector-class\">.ts</span>    \r\n\r\n# <span class=\"hljs-selector-tag\">Compiles</span> <span class=\"hljs-selector-tag\">all</span> <span class=\"hljs-selector-class\">.ts</span> <span class=\"hljs-selector-tag\">files</span> <span class=\"hljs-selector-tag\">in</span> <span class=\"hljs-selector-tag\">the</span> <span class=\"hljs-selector-tag\">current</span> <span class=\"hljs-selector-tag\">folder</span>. <span class=\"hljs-selector-tag\">Does</span> <span class=\"hljs-selector-tag\">NOT</span> <span class=\"hljs-selector-tag\">work</span> <span class=\"hljs-selector-tag\">recursively</span>.\r\n<span class=\"hljs-selector-tag\">tsc</span> *<span class=\"hljs-selector-class\">.ts</span></pre>\r\n<p>We can also use the <code>--watch</code> option to automatically compile a TypeScript file when changes are made:</p>\r\n<pre class=\"hljs nginx\" data-type=\"plain\"><span class=\"hljs-comment\"># Initializes a watcher process that will keep main.js up to date.</span>\r\n<span class=\"hljs-attribute\">tsc</span> main.ts --watch</pre>\r\n<p>More advanced TypeScript users can also create a<em> tsconfig.json</em> file, consisting of various build settings. A configuration file is very handy when working on large projects with lots of .ts files since it somewhat automates the process. You can read more about <em>tsconfig.json</em> in the TypeScript docs <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a></p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/4_Static_typing.png\" alt=\"\" /></p>\r\n<h2>Static Typing</h2>\r\n<p>A very distinctive feature of TypeScript is the support of static typing. This means that you can declare the types of variables, and the compiler will make sure that they aren\'t assigned the wrong types of values. If type declarations are omitted, they will be inferred automatically from your code.</p>\r\n<p>Here is an example. Any variable, function argument or return value can have its type defined on initialization:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-keyword\">var</span> burger: string = <span class=\"hljs-string\">\'hamburger\'</span>,     <span class=\"hljs-comment\">// String </span>\r\n    calories: number = <span class=\"hljs-number\">300</span>,           <span class=\"hljs-comment\">// Numeric</span>\r\n    tasty: boolean = <span class=\"hljs-literal\">true</span>;            <span class=\"hljs-comment\">// Boolean</span>\r\n\r\n<span class=\"hljs-comment\">// Alternatively, you can omit the type declaration:</span>\r\n<span class=\"hljs-comment\">// var burger = \'hamburger\';</span>\r\n\r\n<span class=\"hljs-comment\">// The function expects a string and an integer.</span>\r\n<span class=\"hljs-comment\">// It doesn\'t return anything so the type of the function itself is void.</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\">food: string, energy: number</span>): <span class=\"hljs-title\">void</span> </span>{\r\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Our \"</span> + food + <span class=\"hljs-string\">\" has \"</span> + energy + <span class=\"hljs-string\">\" calories.\"</span>);\r\n}\r\n\r\nspeak(burger, calories);</pre>\r\n<p>Because TypeScript is compiled to JavaScript, and the latter has no idea what types are, they are completely removed:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-comment\">// JavaScript code from the above TS example.</span>\r\n\r\n<span class=\"hljs-keyword\">var</span> burger = <span class=\"hljs-string\">\'hamburger\'</span>,\r\n    calories = <span class=\"hljs-number\">300</span>, \r\n    tasty = <span class=\"hljs-literal\">true</span>; \r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\">food, energy</span>) </span>{\r\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Our \"</span> + food + <span class=\"hljs-string\">\" has \"</span> + energy + <span class=\"hljs-string\">\" calories.\"</span>);\r\n}\r\n\r\nspeak(burger, calories);</pre>\r\n<p>However, if we try to do something illegal, on compilation <code>tsc</code> will warn us that there is an error in our code. For example:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-comment\">// The given type is boolean, the provided value is a string.</span>\r\n<span class=\"hljs-keyword\">var</span> tasty: boolean = <span class=\"hljs-string\">\"I haven\'t tried it yet\"</span>;</pre>\r\n<pre class=\"hljs coffeescript\" data-type=\"plain\">main.ts(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>): error TS2322: Type <span class=\"hljs-string\">\'string\'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> assignable to type <span class=\"hljs-string\">\'boolean\'</span>.</pre>\r\n<p>It will also warn us if we pass the wrong argument to a function:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\">food: string, energy: number</span>): <span class=\"hljs-title\">void</span></span>{\r\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Our \"</span> + food + <span class=\"hljs-string\">\" has \"</span> + energy + <span class=\"hljs-string\">\" calories.\"</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">// Arguments don\'t match the function parameters.</span>\r\nspeak(<span class=\"hljs-string\">\"tripple cheesburger\"</span>, <span class=\"hljs-string\">\"a ton of\"</span>);</pre>\r\n<pre class=\"hljs coffeescript\" data-type=\"plain\">main.ts(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">30</span>): error TS2345: Argument <span class=\"hljs-keyword\">of</span> type <span class=\"hljs-string\">\'string\'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> assignable to parameter <span class=\"hljs-keyword\">of</span> type <span class=\"hljs-string\">\'number\'</span>.</pre>\r\n<p>Here are some of the most commonly used data types:</p>\r\n<ul>\r\n<li>Number - All numeric values are represented by the number type, there aren\'t separate definitions for integers, floats or others.</li>\r\n<li>String - The text type, just like in vanilla JS strings can be surrounded by \'single quotes\' or \"double quotes\".</li>\r\n<li>Boolean - <code>true</code> or <code>false</code>, using 0 and 1 will cause a compilation error.</li>\r\n<li>Any - A variable with this type can have it\'s value set to a string, number, or <strong><em>any</em></strong>thing else.</li>\r\n<li>Arrays - Has two possible syntaxes: <code>my_arr: number[];</code> or <code>my_arr: Array<number></code>.</li>\r\n<li>Void - Used on function that don\'t return anything.</li>\r\n</ul>\r\n<p>To see a list of all of the available types, go to the official TypeScript docs - <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/5_interfaces.png\" alt=\"\" /></p>\r\n<h2>Interfaces</h2>\r\n<p>Interfaces are used to type-check whether an object fits a certain structure. By defining an interface we can name a specific combination of variables, making sure that they will always go together. When translated to JavaScript, interfaces disappear - their only purpose is to help in the development stage.</p>\r\n<p>In the below example we define a simple interface to type-check a function\'s arguments:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-comment\">// Here we define our Food interface, its properties, and their types.</span>\r\ninterface Food {\r\n    <span class=\"hljs-attr\">name</span>: string;\r\n    calories: number;\r\n}\r\n\r\n<span class=\"hljs-comment\">// We tell our function to expect an object that fulfills the Food interface. </span>\r\n<span class=\"hljs-comment\">// This way we know that the properties we need will always be available.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\">food: Food</span>): <span class=\"hljs-title\">void</span></span>{\r\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Our \"</span> + food.name + <span class=\"hljs-string\">\" has \"</span> + food.calories + <span class=\"hljs-string\">\" calories.\"</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">// We define an object that has all of the properties the Food interface expects.</span>\r\n<span class=\"hljs-comment\">// Notice that types will be inferred automatically.</span>\r\n<span class=\"hljs-keyword\">var</span> ice_cream = {\r\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"ice cream\"</span>, \r\n  <span class=\"hljs-attr\">calories</span>: <span class=\"hljs-number\">200</span>\r\n}\r\n\r\nspeak(ice_cream);</pre>\r\n<p>The order of the properties does NOT matter. We just need the required properties to be <strong>present</strong> and to be <strong>the right type</strong>. If something is missing, has the wrong type, or is named differently, the compiler will warn us.</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\">interface Food {\r\n    <span class=\"hljs-attr\">name</span>: string;\r\n    calories: number;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\">food: Food</span>): <span class=\"hljs-title\">void</span></span>{\r\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Our \"</span> + food.name + <span class=\"hljs-string\">\" has \"</span> + food.calories + <span class=\"hljs-string\">\" grams.\"</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">// We\'ve made a deliberate mistake and name is misspelled as nmae.</span>\r\n<span class=\"hljs-keyword\">var</span> ice_cream = {\r\n  <span class=\"hljs-attr\">nmae</span>: <span class=\"hljs-string\">\"ice cream\"</span>, \r\n  <span class=\"hljs-attr\">calories</span>: <span class=\"hljs-number\">200</span>\r\n}\r\n\r\nspeak(ice_cream);</pre>\r\n<pre class=\"hljs bash\" data-type=\"plain\">main.ts(16,7): error TS2345: Argument of <span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">\'{ nmae: string; calories: number; } \r\nis not assignable to parameter of type \'</span>Food<span class=\"hljs-string\">\'. \r\nProperty \'</span>name<span class=\"hljs-string\">\' is missing in type \'</span>{ nmae: string; calories: number; }<span class=\"hljs-string\">\'.</span></pre>\r\n<p>This is a beginners guide so we won\'t be going into more detail about interfaces. However, there is a lot more to them than what we\'ve mentioned here so we recommend you check out the TypeScript docs - <a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/6_classes.png\" alt=\"\" /></p>\r\n<h2>Classes</h2>\r\n<p>When building large scale apps, the object oriented style of programming is preferred by many developers, most notably in languages such as Java or C#. TypeScript offers a class system that is very similar to the one in these languages, including inheritance, abstract classes, interface implementations, setters/getters, and more.</p>\r\n<p>It\'s also fair to mention that since the most recent JavaScript update (ECMAScript 2015), classes are native to vanilla JS and can be used without TypeScript. The two implementation are very similar but have their differences, TypeScript being a bit more strict.</p>\r\n<p>Continuing with the food theme, here is a simple TypeScript class:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Menu</span> </span>{\r\n  <span class=\"hljs-comment\">// Our properties:</span>\r\n  <span class=\"hljs-comment\">// By default they are public, but can also be private or protected.</span>\r\n  items: <span class=\"hljs-built_in\">Array</span><string>;  <span class=\"hljs-comment\">// The items in the menu, an array of strings.</span>\r\n  pages: number;         <span class=\"hljs-comment\">// How many pages will the menu be, a number.</span>\r\n\r\n  <span class=\"hljs-comment\">// A straightforward constructor. </span>\r\n  <span class=\"hljs-keyword\">constructor</span>(item_list: Array<string>, total_pages: number) {\r\n    <span class=\"hljs-comment\">// The this keyword is mandatory.</span>\r\n    <span class=\"hljs-keyword\">this</span>.items = item_list;    \r\n    <span class=\"hljs-keyword\">this</span>.pages = total_pages;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Methods</span>\r\n  list(): <span class=\"hljs-keyword\">void</span> {\r\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Our menu for today:\"</span>);\r\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i<<span class=\"hljs-keyword\">this</span>.items.length; i++) {\r\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items[i]);\r\n    }\r\n  }\r\n\r\n} \r\n\r\n<span class=\"hljs-comment\">// Create a new instance of the Menu class.</span>\r\n<span class=\"hljs-keyword\">var</span> sundayMenu = <span class=\"hljs-keyword\">new</span> Menu([<span class=\"hljs-string\">\"pancakes\"</span>,<span class=\"hljs-string\">\"waffles\"</span>,<span class=\"hljs-string\">\"orange juice\"</span>], <span class=\"hljs-number\">1</span>);\r\n\r\n<span class=\"hljs-comment\">// Call the list method.</span>\r\nsundayMenu.list();</pre>\r\n<p>Anyone who has written at least a bit of Java or C# should find this syntax comfortably familiar. The same goes for inheritance:</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HappyMeal</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Menu</span> </span>{\r\n  <span class=\"hljs-comment\">// Properties are inherited</span>\r\n\r\n  <span class=\"hljs-comment\">// A new constructor has to be defined.</span>\r\n  <span class=\"hljs-keyword\">constructor</span>(item_list: Array<string>, total_pages: number) {\r\n    <span class=\"hljs-comment\">// In this case we want the exact same constructor as the parent class (Menu), </span>\r\n    <span class=\"hljs-comment\">// To automatically copy it we can call super() - a reference to the parent\'s constructor.</span>\r\n    <span class=\"hljs-keyword\">super</span>(item_list, total_pages);\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Just like the properties, methods are inherited from the parent.</span>\r\n  <span class=\"hljs-comment\">// However, we want to override the list() function so we redefine it.</span>\r\n  list(): <span class=\"hljs-keyword\">void</span>{\r\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Our special menu for children:\"</span>);\r\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i<<span class=\"hljs-keyword\">this</span>.items.length; i++) {\r\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items[i]);\r\n    }\r\n\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Create a new instance of the HappyMeal class.</span>\r\n<span class=\"hljs-keyword\">var</span> menu_for_children = <span class=\"hljs-keyword\">new</span> HappyMeal([<span class=\"hljs-string\">\"candy\"</span>,<span class=\"hljs-string\">\"drink\"</span>,<span class=\"hljs-string\">\"toy\"</span>], <span class=\"hljs-number\">1</span>);\r\n\r\n<span class=\"hljs-comment\">// This time the log message will begin with the special introduction.</span>\r\nmenu_for_children.list();</pre>\r\n<p>For a more in-depth look at classes in TS you can read the documentation - <a href=\"http://www.typescriptlang.org/docs/handbook/classes.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/7_generics.png\" alt=\"\" /></p>\r\n<h2>Generics</h2>\r\n<p>Generics are templates that allow the same function to accept arguments of various different types. Creating reusable components using generics is better than using the <code>any</code> data type, as generics preserve the types of the variables that go in and out of them.</p>\r\n<p>A quick example would be a script that receives an argument and returns an array containing that same argument.</p>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-comment\">// The <T> after the function name symbolizes that it\'s a generic function.</span>\r\n<span class=\"hljs-comment\">// When we call the function, every instance of T will be replaced with the actual provided type.</span>\r\n\r\n<span class=\"hljs-comment\">// Receives one argument of type T,</span>\r\n<span class=\"hljs-comment\">// Returns an array of type T.</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genericFunc</span><<span class=\"hljs-title\">T</span>>(<span class=\"hljs-params\">argument: T</span>): <span class=\"hljs-title\">T</span>[] </span>{    \r\n  <span class=\"hljs-keyword\">var</span> arrayOfT: T[] = [];    <span class=\"hljs-comment\">// Create empty array of type T.</span>\r\n  arrayOfT.push(argument);   <span class=\"hljs-comment\">// Push, now arrayOfT = [argument].</span>\r\n  <span class=\"hljs-keyword\">return</span> arrayOfT;\r\n}\r\n\r\n<span class=\"hljs-keyword\">var</span> arrayFromString = genericFunc<string>(<span class=\"hljs-string\">\"beep\"</span>);\r\n<span class=\"hljs-built_in\">console</span>.log(arrayFromString[<span class=\"hljs-number\">0</span>]);         <span class=\"hljs-comment\">// \"beep\"</span>\r\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> arrayFromString[<span class=\"hljs-number\">0</span>])   <span class=\"hljs-comment\">// String</span>\r\n\r\n<span class=\"hljs-keyword\">var</span> arrayFromNumber = genericFunc(<span class=\"hljs-number\">42</span>);\r\n<span class=\"hljs-built_in\">console</span>.log(arrayFromNumber[<span class=\"hljs-number\">0</span>]);         <span class=\"hljs-comment\">// 42</span>\r\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> arrayFromNumber[<span class=\"hljs-number\">0</span>])   <span class=\"hljs-comment\">// number</span></pre>\r\n<p>The first time we called the function we manually set the type to string. This isn\'t required as the compiler can see what argument has been passed and automatically decide what type suits it best, like in the second call. Although it\'s not mandatory, providing the type every time is considered good practice as the compiler might fail to guess the right type in more complex scenarios.</p>\r\n<p>The TypeScript docs include a couple of advanced examples including generics classes, combining them with interfaces, and more. You can find them <a href=\"http://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/8_modules.png\" alt=\"\" /></p>\r\n<h2>Modules</h2>\r\n<p>Another important concept when working on large apps is modularity. Having your code split into many small reusable components helps your project stay organized and understandable, compared to having a single 10000-line file for everything.</p>\r\n<p>TypeScript introduces a syntax for exporting and importing modules, but cannot handle the actual wiring between files. To enable external modules TS relies on third-party libraries: <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">require.js</a> for browser apps and <a href=\"https://en.wikipedia.org/wiki/CommonJS\" target=\"_blank\" rel=\"noreferrer noopener\">CommonJS</a> for Node.js. Let\'s take a look at a simple example of TypeScript modules with require.js:</p>\r\n<p>We will have two files. One exports a function, the other imports and calls it.</p>\r\n<h3>exporter.ts</h3>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-keyword\">var</span> sayHi = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(): <span class=\"hljs-title\">void</span> </span>{\r\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello!\"</span>);\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> = sayHi;</pre>\r\n<h3>importer.ts</h3>\r\n<pre class=\"js hljs javascript\" data-type=\"js\"><span class=\"hljs-keyword\">import</span> sayHi = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'./exporter\'</span>);\r\nsayHi();</pre>\r\n<p>Now we need to download require.js and include it in a script tag - see how <a href=\"http://requirejs.org/docs/start.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>. The last step is to compile our two .ts files. An extra parameter needs to be added to tell TypeScript that we are building modules for require.js (also referred to as AMD), as opposed to CommonJS ones.</p>\r\n<pre class=\"hljs nginx\" data-type=\"plain\"><span class=\"hljs-attribute\">tsc</span> --module amd <span class=\"hljs-regexp\">*.ts</span></pre>\r\n<p>Modules are quite complex and are out of the scope of this tutorial. If you want to continue reading about them head out to the TS docs - <a href=\"http://www.typescriptlang.org/docs/handbook/modules.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/9_declaration_files.png\" alt=\"\" /></p>\r\n<h2>Third-party Declaration Files</h2>\r\n<p>When using a library that was originally designed for regular JavaScript, we need to apply a declaration file to make that library compatible with TypeScript. A declaration file has the extension <strong>.d.ts</strong> and contains various information about the library and its API.</p>\r\n<p>TypeScript declaration files are usually written by hand, but there\'s a high chance that the library you need already has a .d.ts. file created by somebody else. <a href=\"http://definitelytyped.org/\" target=\"_blank\" rel=\"noreferrer noopener\">DefinitelyTyped</a> is the biggest public repository, containing files for over a thousand libraries. There is also a popular Node.js module for managing TypeScript definitions called <a href=\"https://github.com/typings/typings\" target=\"_blank\" rel=\"noreferrer noopener\">Typings</a>.</p>\r\n<p>If you still need to write a declaration file yourself, this <a href=\"http://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\" target=\"_blank\" rel=\"noreferrer noopener\">guide</a> will get you started.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2016/07/10_typescript_2.png\" alt=\"\" /></p>\r\n<p>Â </p>\r\n<h2>pcoming Features in TypeScript 2.0</h2>\r\n<p>TypeScript is still under active development and is evlolving constantly. At the time of the writing of this tutorial the LTS version is 1.8.10, but Microsoft have already released a Beta for TypeScript 2.0. It\'s available for public testing and you can try it out now:</p>\r\n<pre class=\"hljs coffeescript\" data-type=\"plain\"><span class=\"hljs-built_in\">npm</span> install -g typescript@beta</pre>\r\n<p>It introduces some handy new concepts such as:</p>\r\n<ul>\r\n<li>Non-nullable types flag which prevents some variables from having their value set to <code>null</code> or <code>undefined</code>.</li>\r\n<li>New improved system for getting declaration files directly with an <code>npm install</code>.</li>\r\n<li>Control flow type analysis that catches errors previously missed by the compiler.</li>\r\n<li>Some innovations in the module export/import syntax.</li>\r\n</ul>\r\n<p>Another long-awaited feature is the ability to control the flow of asynchronous functions in an <code>async/await</code> block. This should be available in a future 2.1 update.</p>\r\n<h2>Further Reading</h2>\r\n<p>The amount of information in the official docs can be a bit overwhelming at first, but the benefits of going through it will be huge. Our tutorial is to be used as an introduction, so we haven\'t covered all of the chapters from the TypeScript documentation. Here are some of the more useful concepts that we\'ve skipped:</p>\r\n<ul>\r\n<li>Namespaces - <a href=\"http://www.typescriptlang.org/docs/handbook/namespaces.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</li>\r\n<li>Enums - <a href=\"http://www.typescriptlang.org/docs/handbook/enums.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</li>\r\n<li>Advanced Types and Type Guards - <a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</li>\r\n<li>Writing JSX in TypeScript - <a href=\"http://www.typescriptlang.org/docs/handbook/jsx.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</li>\r\n</ul>\r\n<h2>Conclusion</h2>\r\n<p>We hope you enjoyed this tutorial!</p>\r\n<p>Do you have any thoughts on TypeScript and would you consider using it in your projects? Feel free to leave a comment below!</p>','2019-07-08 11:15:01','This tutorial is aimed at people who are fairly proficient in JavaScript but are still beginners when it comes to TypeScript.',2,1,'2019-07-08 11:16:04','Learn TypeScript in 30 Minutes ','2019-07-08 11:15:01',5,3,4,0),(16,'<h1 class=\"article__title\">24 Cool PHP Libraries You Should Know About</h1>\r\n<h2>1. Dispatch - Micro Framework</h2>\r\n<p><a href=\"https://github.com/noodlehaus/dispatch\" target=\"_blank\" rel=\"noreferrer noopener\">Dispatch</a> is a minimal PHP framework. It doesn\'t give you the full MVC setup, but you can define URL rules and methods to better organize your application. This is perfect for APIs, simple sites or prototypes:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-comment\">// include the library</span>\r\n<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\'dispatch.php\'</span>;\r\n\r\n<span class=\"hljs-comment\">// define your routes</span>\r\nget(<span class=\"hljs-string\">\'/greet\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// render a view</span>\r\n    render(<span class=\"hljs-string\">\'greet-form\'</span>);\r\n});\r\n\r\n<span class=\"hljs-comment\">// post handler</span>\r\npost(<span class=\"hljs-string\">\'/greet\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\r\n    $name = from($_POST, <span class=\"hljs-string\">\'name\'</span>);\r\n    <span class=\"hljs-comment\">// render a view while passing some locals</span>\r\n    render(<span class=\"hljs-string\">\'greet-show\'</span>, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\'name\'</span> => $name));\r\n});\r\n\r\n<span class=\"hljs-comment\">// serve your site</span>\r\ndispatch();</pre>\r\n<p>You can match specific types of HTTP requests and paths, render views and more. If you combine Dispatch with some of the other frameworks here, you can have a really powerful and lightweight setup!</p>\r\n<h2>2. Klein â Lightning fast router for PHP</h2>\r\n<p><a href=\"https://github.com/chriso/klein.php\" target=\"_blank\" rel=\"noreferrer noopener\">Klein</a> is another light weight routing library for PHP 5.3+. It has a bit more verbose syntax than Dispatch, but is quite fast. Here is an example:</p>\r\n<pre class=\"hljs php\">respond(<span class=\"hljs-string\">\'/[:name]\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($request)</span> </span>{\r\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\'Hello \'</span> . $request->name;\r\n});</pre>\r\n<p>You can also subscribe to specific HTTP methods and use regexes as paths:</p>\r\n<pre class=\"hljs php\">respond(<span class=\"hljs-string\">\'GET\'</span>, <span class=\"hljs-string\">\'/posts\'</span>, $callback);\r\nrespond(<span class=\"hljs-string\">\'POST\'</span>, <span class=\"hljs-string\">\'/posts/create\'</span>, $callback);\r\nrespond(<span class=\"hljs-string\">\'PUT\'</span>, <span class=\"hljs-string\">\'/posts/[i:id]\'</span>, $callback);\r\nrespond(<span class=\"hljs-string\">\'DELETE\'</span>, <span class=\"hljs-string\">\'/posts/[i:id]\'</span>, $callback);\r\n\r\n<span class=\"hljs-comment\">// To match multiple request methods:</span>\r\nrespond(<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\'POST\'</span>,<span class=\"hljs-string\">\'GET\'</span>), $route, $callback);\r\n\r\n<span class=\"hljs-comment\">// Or you might want to handle the requests in the same place</span>\r\nrespond(<span class=\"hljs-string\">\'/posts/[create|edit:action]?/[i:id]?\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($request, $response)</span> </span>{\r\n    <span class=\"hljs-keyword\">switch</span> ($request->action) {\r\n        <span class=\"hljs-comment\">// do something</span>\r\n    }\r\n});</pre>\r\n<p>This is great for small projects, but you have to be disciplined when using a library like this for larger apps, as your code can become unmaintainable very fast. For this purpose, you would be better off with a full blown MVC framework like <a href=\"http://www.laravel.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Laravel</a> or <a href=\"http://www.codeigniter.com/\" target=\"_blank\" rel=\"noreferrer noopener\">CodeIgniter</a>.</p>\r\n<h2>3. Ham - Routing Library with Caching</h2>\r\n<p><a href=\"https://github.com/radiosilence/Ham\" target=\"_blank\" rel=\"noreferrer noopener\">Ham</a> is also a lightweight routing framework but it utilizes caching for even more speed gains. It achieves this by caching anything I/O related in XCache/APC. Here is an example:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">\'../ham/ham.php\'</span>;\r\n\r\n$app = <span class=\"hljs-keyword\">new</span> Ham(<span class=\"hljs-string\">\'example\'</span>);\r\n$app->config_from_file(<span class=\"hljs-string\">\'settings.php\'</span>);\r\n\r\n$app->route(<span class=\"hljs-string\">\'/pork\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($app)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Delicious pork.\"</span>;\r\n});\r\n\r\n$hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($app, $name=<span class=\"hljs-string\">\'world\'</span>)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> $app->render(<span class=\"hljs-string\">\'hello.html\'</span>, <span class=\"hljs-keyword\">array</span>(\r\n        <span class=\"hljs-string\">\'name\'</span> => $name\r\n    ));\r\n};\r\n$app->route(<span class=\"hljs-string\">\'/hello/<string>\'</span>, $hello);\r\n$app->route(<span class=\"hljs-string\">\'/\'</span>, $hello);\r\n\r\n$app->run();</pre>\r\n<p>The library requires that you have either XCache or APC installed, which would mean that it won\'t work on most hosting providers. But if you do have one of these installed or if you control your webserver, you should try this very fast framework.</p>\r\n<h2>4. Assetic - Asset Management</h2>\r\n<p><a href=\"https://github.com/kriswallsmith/assetic\" target=\"_blank\" rel=\"noreferrer noopener\">Assetic</a> is am asset management framework for PHP. It combines and minifies your CSS/JS assets. Here is how it is used:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Assetic</span>\\<span class=\"hljs-title\">Asset</span>\\<span class=\"hljs-title\">AssetCollection</span>;\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Assetic</span>\\<span class=\"hljs-title\">Asset</span>\\<span class=\"hljs-title\">FileAsset</span>;\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Assetic</span>\\<span class=\"hljs-title\">Asset</span>\\<span class=\"hljs-title\">GlobAsset</span>;\r\n\r\n$js = <span class=\"hljs-keyword\">new</span> AssetCollection(<span class=\"hljs-keyword\">array</span>(\r\n    <span class=\"hljs-keyword\">new</span> GlobAsset(<span class=\"hljs-string\">\'/path/to/js/*\'</span>),\r\n    <span class=\"hljs-keyword\">new</span> FileAsset(<span class=\"hljs-string\">\'/path/to/another.js\'</span>),\r\n));\r\n\r\n<span class=\"hljs-comment\">// the code is merged when the asset is dumped</span>\r\n<span class=\"hljs-keyword\">echo</span> $js->dump();</pre>\r\n<p>Combining assets in this manner is a good idea, as it can speed up your site. Not only is the total download size reduced, but also a lot of unnecessary HTTP requests are eliminated (two of the things that affect page load time the most).</p>\r\n<h2>5. ImageWorkshop - Image Manipulation with Layers</h2>\r\n<p><a href=\"http://phpimageworkshop.com/\" target=\"_blank\" rel=\"noreferrer noopener\">ImageWorkshop</a> is an Open Source library that lets you manipulate images with layers. With it you can resize, crop, make thumbnails, add watermarks and more. Here is an example:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-comment\">// We initialize the norway layer from the picture norway.jpg</span>\r\n$norwayLayer = ImageWorkshop::initFromPath(<span class=\"hljs-string\">\'/path/to/images/norway.jpg\'</span>); \r\n\r\n<span class=\"hljs-comment\">// We initialize the watermark layer from the picture watermark.png</span>\r\n$watermarkLayer = ImageWorkshop::initFromPath(<span class=\"hljs-string\">\'/path/to/images/watermark.png\'</span>); \r\n\r\n$image = $norwayLayer->getResult(); <span class=\"hljs-comment\">// This is the generated image ! </span>\r\n\r\nheader(<span class=\"hljs-string\">\'Content-type: image/jpeg\'</span>);\r\nimagejpeg($image, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-number\">95</span>); <span class=\"hljs-comment\">// We choose to show a JPG with a quality of 95%</span>\r\n<span class=\"hljs-keyword\">exit</span>;</pre>\r\n<p>ImageWorkshop is developed to make easy the most common cases for manipulating images in PHP. If you need something more powerful though, you should look at the <a href=\"https://github.com/avalanche123/Imagine\" target=\"_blank\" rel=\"noreferrer noopener\">Imagine library</a>.</p>\r\n<h2>6. Snappy - Snapshot/PDF Library</h2>\r\n<p><a href=\"https://github.com/KnpLabs/snappy\" target=\"_blank\" rel=\"noreferrer noopener\">Snappy</a> is a PHP5 library that allows you to take snapshots or PDFs of URLs or HTML documents. It depends on the <a href=\"http://code.google.com/p/wkhtmltopdf/\" target=\"_blank\" rel=\"noreferrer noopener\">wkhtmltopdf</a> binary, which is available on Linux, Windows and OSX. You use it like this:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">require_once</span> <span class=\"hljs-string\">\'/path/to/snappy/src/autoload.php\'</span>; \r\n\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Knp</span>\\<span class=\"hljs-title\">Snappy</span>\\<span class=\"hljs-title\">Pdf</span>; \r\n\r\n<span class=\"hljs-comment\">// Initialize the library with the</span>\r\n<span class=\"hljs-comment\">// path to the wkhtmltopdf binary:</span>\r\n$snappy = <span class=\"hljs-keyword\">new</span> Pdf(<span class=\"hljs-string\">\'/usr/local/bin/wkhtmltopdf\'</span>); \r\n\r\n<span class=\"hljs-comment\">// Display the resulting pdf in the browser</span>\r\n<span class=\"hljs-comment\">// by setting the Content-type header to pdf: </span>\r\n\r\nheader(<span class=\"hljs-string\">\'Content-Type: application/pdf\'</span>);\r\nheader(<span class=\"hljs-string\">\'Content-Disposition: attachment; filename=\"file.pdf\"\'</span>); \r\n\r\n<span class=\"hljs-keyword\">echo</span> $snappy->getOutput(<span class=\"hljs-string\">\'http://www.github.com\'</span>);</pre>\r\n<p>Keep in mind that calling external binaries might not be allowed by your hosting provider.</p>\r\n<h2>6. Snappy - Snapshot/PDF Library</h2>\r\n<p><a href=\"https://github.com/KnpLabs/snappy\" target=\"_blank\" rel=\"noreferrer noopener\">Snappy</a> is a PHP5 library that allows you to take snapshots or PDFs of URLs or HTML documents. It depends on the <a href=\"http://code.google.com/p/wkhtmltopdf/\" target=\"_blank\" rel=\"noreferrer noopener\">wkhtmltopdf</a> binary, which is available on Linux, Windows and OSX. You use it like this:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">require_once</span> <span class=\"hljs-string\">\'/path/to/snappy/src/autoload.php\'</span>; \r\n\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Knp</span>\\<span class=\"hljs-title\">Snappy</span>\\<span class=\"hljs-title\">Pdf</span>; \r\n\r\n<span class=\"hljs-comment\">// Initialize the library with the</span>\r\n<span class=\"hljs-comment\">// path to the wkhtmltopdf binary:</span>\r\n$snappy = <span class=\"hljs-keyword\">new</span> Pdf(<span class=\"hljs-string\">\'/usr/local/bin/wkhtmltopdf\'</span>); \r\n\r\n<span class=\"hljs-comment\">// Display the resulting pdf in the browser</span>\r\n<span class=\"hljs-comment\">// by setting the Content-type header to pdf: </span>\r\n\r\nheader(<span class=\"hljs-string\">\'Content-Type: application/pdf\'</span>);\r\nheader(<span class=\"hljs-string\">\'Content-Disposition: attachment; filename=\"file.pdf\"\'</span>); \r\n\r\n<span class=\"hljs-keyword\">echo</span> $snappy->getOutput(<span class=\"hljs-string\">\'http://www.github.com\'</span>);</pre>\r\n<p>Keep in mind that calling external binaries might not be allowed by your hosting provider.</p>\r\n<h2>8. Underscore - PHP\'s Utility Belt</h2>\r\n<p><a href=\"http://brianhaveri.github.com/Underscore.php/\" target=\"_blank\" rel=\"noreferrer noopener\">Underscore</a> is a port of the original <a href=\"http://documentcloud.github.com/underscore/\" target=\"_blank\" rel=\"noreferrer noopener\">Underscore.js</a> â the utility belt for JavaScript applications. The PHP version doesn\'t disappoint and has support for nearly all of the original\'s functionality. Some examples:</p>\r\n<pre class=\"hljs php\">__::each(<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($num)</span> </span>{ <span class=\"hljs-keyword\">echo</span> $num . <span class=\"hljs-string\">\',\'</span>; }); <span class=\"hljs-comment\">// 1,2,3,</span>\r\n\r\n$multiplier = <span class=\"hljs-number\">2</span>;\r\n__::each(<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($num, $index)</span> <span class=\"hljs-title\">use</span> <span class=\"hljs-params\">($multiplier)</span> </span>{\r\n  <span class=\"hljs-keyword\">echo</span> $index . <span class=\"hljs-string\">\'=\'</span> . ($num * $multiplier) . <span class=\"hljs-string\">\',\'</span>;\r\n});\r\n<span class=\"hljs-comment\">// prints: 0=2,1=4,2=6,</span>\r\n\r\n__::reduce(<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($memo, $num)</span> </span>{ <span class=\"hljs-keyword\">return</span> $memo + $num; }, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 6</span>\r\n\r\n__::find(<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($num)</span> </span>{ <span class=\"hljs-keyword\">return</span> $num % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>; }); <span class=\"hljs-comment\">// 2</span>\r\n\r\n__::filter(<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">($num)</span> </span>{ <span class=\"hljs-keyword\">return</span> $num % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>; }); <span class=\"hljs-comment\">// array(2, 4)</span></pre>\r\n<p>The library also has support for chaining, which makes it even more powerful.</p>\r\n<h2>9. Requests - Easy HTTP Requests</h2>\r\n<p><a href=\"https://github.com/rmccue/Requests\" target=\"_blank\" rel=\"noreferrer noopener\">Requests</a> is a library that makes it easy to issue HTTP requests. If you are like me, and can never seem to remember the various options passed to Curl, this is for you:</p>\r\n<pre class=\"hljs php\">$headers = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\'Accept\'</span> => <span class=\"hljs-string\">\'application/json\'</span>);\r\n$options = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\'auth\'</span> => <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\'user\'</span>, <span class=\"hljs-string\">\'pass\'</span>));\r\n$request = Requests::get(<span class=\"hljs-string\">\'https://api.github.com/gists\'</span>, $headers, $options);\r\n\r\nvar_dump($request->status_code);\r\n<span class=\"hljs-comment\">// int(200)</span>\r\n\r\nvar_dump($request->headers[<span class=\"hljs-string\">\'content-type\'</span>]);\r\n<span class=\"hljs-comment\">// string(31) \"application/json; charset=utf-8\"</span>\r\n\r\nvar_dump($request->body);\r\n<span class=\"hljs-comment\">// string(26891) \"[â¦]\"</span></pre>\r\n<p>With this library, you can send HEAD, GET, POST, PUT, DELETE and PATCH HTTP requests, add files and parameters with arrays, and access all the response data.</p>\r\n<h2>10. Buzz - Simple HTTP Request Library</h2>\r\n<p><a href=\"https://github.com/kriswallsmith/Buzz\" target=\"_blank\" rel=\"noreferrer noopener\">Buzz</a> is another PHP library for issuing HTTP requests. Here is an example:</p>\r\n<pre class=\"hljs php\">$request = <span class=\"hljs-keyword\">new</span> Buzz\\Message\\Request(<span class=\"hljs-string\">\'HEAD\'</span>, <span class=\"hljs-string\">\'/\'</span>, <span class=\"hljs-string\">\'http://google.com\'</span>);\r\n$response = <span class=\"hljs-keyword\">new</span> Buzz\\Message\\Response();\r\n\r\n$client = <span class=\"hljs-keyword\">new</span> Buzz\\Client\\FileGetContents();\r\n$client->send($request, $response);\r\n\r\n<span class=\"hljs-keyword\">echo</span> $request;\r\n<span class=\"hljs-keyword\">echo</span> $response;</pre>\r\n<p>It is lacking in documentation, so you will have to read through the source code to get a feel of all the options that it supports. Or you can go with the Requests library that I presented above.</p>\r\n<h2>11. Goutte - Web Scraping Library</h2>\r\n<p><a href=\"https://github.com/fabpot/Goutte\" target=\"_blank\" rel=\"noreferrer noopener\">Goutte</a> is a library for scraping websites and extracting data. It provides a nice API that makes it easy to select specific elements from the remote pages.</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">require_once</span> <span class=\"hljs-string\">\'/path/to/goutte.phar\'</span>; \r\n\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Goutte</span>\\<span class=\"hljs-title\">Client</span>; \r\n\r\n$client = <span class=\"hljs-keyword\">new</span> Client();\r\n$crawler = $client->request(<span class=\"hljs-string\">\'GET\'</span>, <span class=\"hljs-string\">\'http://www.symfony-project.org/\'</span>); \r\n\r\n<span class=\"hljs-comment\">// Click on links: </span>\r\n\r\n$link = $crawler->selectLink(<span class=\"hljs-string\">\'Plugins\'</span>)->link();\r\n$crawler = $client->click($link); \r\n\r\n<span class=\"hljs-comment\">// Extract data with a CSS-like syntax: </span>\r\n\r\n$t = $crawler->filter(<span class=\"hljs-string\">\'#data\'</span>)->text(); \r\n\r\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Here is the text: $t\"</span>;</pre>\r\n<h2>12. Carbon - DateTime Library</h2>\r\n<p><a href=\"https://github.com/briannesbitt/Carbon\" target=\"_blank\" rel=\"noreferrer noopener\">Carbon</a> is a simple API extension for the DateTime. It enhances the class with some useful methods for working with dates and time. For example:</p>\r\n<pre class=\"hljs php\">printf(<span class=\"hljs-string\">\"Right now is %s\"</span>, Carbon::now()->toDateTimeString());\r\nprintf(<span class=\"hljs-string\">\"Right now in Vancouver is %s\"</span>, Carbon::now(<span class=\"hljs-string\">\'America/Vancouver\'</span>));\r\n\r\n$tomorrow = Carbon::now()->addDay();\r\n$lastWeek = Carbon::now()->subWeek();\r\n$nextSummerOlympics = Carbon::createFromDate(<span class=\"hljs-number\">2012</span>)->addYears(<span class=\"hljs-number\">4</span>);\r\n\r\n$officialDate = Carbon::now()->toRFC2822String();\r\n\r\n$howOldAmI = Carbon::createFromDate(<span class=\"hljs-number\">1975</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">21</span>)->age;\r\n\r\n$noonTodayLondonTime = Carbon::createFromTime(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\'Europe/London\'</span>);\r\n\r\n$endOfWorld = Carbon::createFromDate(<span class=\"hljs-number\">2012</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">\'GMT\'</span>);\r\n\r\n<span class=\"hljs-comment\">// comparisons are always done in UTC</span>\r\n<span class=\"hljs-keyword\">if</span> (Carbon::now()->gte($endOfWorld)) {\r\n    <span class=\"hljs-keyword\">die</span>();\r\n}\r\n\r\n<span class=\"hljs-keyword\">if</span> (Carbon::now()->isWeekend()) {\r\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\'Party!\'</span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">echo</span> Carbon::now()->subMinutes(<span class=\"hljs-number\">2</span>)->diffForHumans(); <span class=\"hljs-comment\">// \'2 minutes ago\'</span></pre>\r\n<p>Carbon hasn\'t seen new commits in the last few months, so you might want to check out <a href=\"https://github.com/dandoescode/datum\" target=\"_blank\" rel=\"noreferrer noopener\">Datum</a>, a fork that continues to be worked on.</p>\r\n<h2>13. Ubench - Micro Benchmarking Library</h2>\r\n<p><a href=\"https://github.com/devster/ubench\" target=\"_blank\" rel=\"noreferrer noopener\">Ubench</a> is a micro library for benchmarking your PHP code. It monitors execution time and memory usage. Here\'s an example:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Ubench</span>\\<span class=\"hljs-title\">Ubench</span>;\r\n\r\n$bench = <span class=\"hljs-keyword\">new</span> Ubench;\r\n\r\n$bench->start();\r\n\r\n<span class=\"hljs-comment\">// Execute some code</span>\r\n\r\n$bench->end();\r\n\r\n<span class=\"hljs-comment\">// Get elapsed time and memory</span>\r\n<span class=\"hljs-keyword\">echo</span> $bench->getTime(); <span class=\"hljs-comment\">// 156ms or 1.123s</span>\r\n<span class=\"hljs-keyword\">echo</span> $bench->getTime(<span class=\"hljs-keyword\">true</span>); <span class=\"hljs-comment\">// elapsed microtime in float</span>\r\n<span class=\"hljs-keyword\">echo</span> $bench->getTime(<span class=\"hljs-keyword\">false</span>, <span class=\"hljs-string\">\'%d%s\'</span>); <span class=\"hljs-comment\">// 156ms or 1s</span>\r\n\r\n<span class=\"hljs-keyword\">echo</span> $bench->getMemoryPeak(); <span class=\"hljs-comment\">// 152B or 90.00Kb or 15.23Mb</span>\r\n<span class=\"hljs-keyword\">echo</span> $bench->getMemoryPeak(<span class=\"hljs-keyword\">true</span>); <span class=\"hljs-comment\">// memory peak in bytes</span>\r\n<span class=\"hljs-keyword\">echo</span> $bench->getMemoryPeak(<span class=\"hljs-keyword\">false</span>, <span class=\"hljs-string\">\'%.3f%s\'</span>); <span class=\"hljs-comment\">// 152B or 90.152Kb or 15.234Mb</span>\r\n\r\n<span class=\"hljs-comment\">// Returns the memory usage at the end mark</span>\r\n<span class=\"hljs-keyword\">echo</span> $bench->getMemoryUsage(); <span class=\"hljs-comment\">// 152B or 90.00Kb or 15.23Mb</span></pre>\r\n<p>It would be a good idea to run these checks only while developing.</p>\r\n<h2>14. Validation - Input Validation Engine</h2>\r\n<p><a href=\"https://github.com/Respect/Validation\" target=\"_blank\" rel=\"noreferrer noopener\">Validation</a> claims to be the most awesome validation engine ever created for PHP. But can it deliver? See for yourself:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Respect</span>\\<span class=\"hljs-title\">Validation</span>\\<span class=\"hljs-title\">Validator</span> <span class=\"hljs-title\">as</span> <span class=\"hljs-title\">v</span>; \r\n\r\n<span class=\"hljs-comment\">// Simple Validation </span>\r\n\r\n$number = <span class=\"hljs-number\">123</span>;\r\nv::numeric()->validate($number); <span class=\"hljs-comment\">//true </span>\r\n\r\n<span class=\"hljs-comment\">// Chained Validation </span>\r\n\r\n$usernameValidator = v::alnum()->noWhitespace()->length(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">15</span>);\r\n$usernameValidator->validate(<span class=\"hljs-string\">\'alganet\'</span>); <span class=\"hljs-comment\">//true </span>\r\n\r\n<span class=\"hljs-comment\">// Validating Object Attributes </span>\r\n\r\n$user = <span class=\"hljs-keyword\">new</span> stdClass;\r\n$user->name = <span class=\"hljs-string\">\'Alexandre\'</span>;\r\n$user->birthdate = <span class=\"hljs-string\">\'1987-07-01\'</span>; \r\n\r\n<span class=\"hljs-comment\">// Validate its attributes in a single chain: </span>\r\n\r\n$userValidator = v::attribute(<span class=\"hljs-string\">\'name\'</span>, v::string()->length(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">32</span>))\r\n                  ->attribute(<span class=\"hljs-string\">\'birthdate\'</span>, v::date()->minimumAge(<span class=\"hljs-number\">18</span>)); \r\n\r\n$userValidator->validate($user); <span class=\"hljs-comment\">//true</span></pre>\r\n<p>With this library you can validate your forms or other user-submitted data. In addition, it supports a wide number of existing checks, throwing exceptions and customizable error messages.</p>\r\n<h2>15. Filterus - Filtering Library</h2>\r\n<p><a href=\"https://github.com/ircmaxell/filterus\" target=\"_blank\" rel=\"noreferrer noopener\">Filterus</a> is another filtering library, but it can not only validate, but also filter input to match a preset pattern. Here is an example:</p>\r\n<pre class=\"hljs php\">$f = Filter::factory(<span class=\"hljs-string\">\'string,max:5\'</span>);\r\n$str = <span class=\"hljs-string\">\'This is a test string\'</span>; \r\n\r\n$f->validate($str); <span class=\"hljs-comment\">// false</span>\r\n$f->filter($str); <span class=\"hljs-comment\">// \'This \'</span></pre>\r\n<p>Filterus has a lot of built-in patterns, supports chaining and can even validate array elements with individual validation rules.</p>\r\n<h2>16. Faker - Fake Data Generator</h2>\r\n<p><a href=\"https://github.com/fzaninotto/Faker\" target=\"_blank\" rel=\"noreferrer noopener\">Faker</a> is a PHP library that generates fake data for you. It can come handy when you need to populate a test database or generate sample data for your web application. It is also very easy to use:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-comment\">// require the Faker autoloader</span>\r\n<span class=\"hljs-keyword\">require_once</span> <span class=\"hljs-string\">\'/path/to/Faker/src/autoload.php\'</span>;\r\n\r\n<span class=\"hljs-comment\">// use the factory to create a Faker\\Generator instance</span>\r\n$faker = Faker\\Factory::create();\r\n\r\n<span class=\"hljs-comment\">// generate data by accessing properties</span>\r\n<span class=\"hljs-keyword\">echo</span> $faker->name; <span class=\"hljs-comment\">// \'Lucy Cechtelar\';</span>\r\n\r\n<span class=\"hljs-keyword\">echo</span> $faker->address;\r\n  <span class=\"hljs-comment\">// \"426 Jordy Lodge</span>\r\n  <span class=\"hljs-comment\">// Cartwrightshire, SC 88120-6700\"</span>\r\n\r\n<span class=\"hljs-keyword\">echo</span> $faker->text;\r\n  <span class=\"hljs-comment\">// Sint velit eveniet. Rerum atque repellat voluptatem quia ...</span></pre>\r\n<p>As long as you keep accessing properties of the object, it will continue returning randomly generated data.</p>\r\n<h2>17. Mustache.php - Elegant Templating Library</h2>\r\n<p>Mustache is a popular templating language that has implementations in practically every programming languages. This gives you the benefit that you can reuse your templates in both client and server side. <a href=\"https://github.com/bobthecow/mustache.php\" target=\"_blank\" rel=\"noreferrer noopener\">Mustache.php</a> is an implementation that uses â you guessed it â PHP:</p>\r\n<pre class=\"hljs php\">$m = <span class=\"hljs-keyword\">new</span> Mustache_Engine;\r\n<span class=\"hljs-keyword\">echo</span> $m->render(<span class=\"hljs-string\">\'Hello {{planet}}\'</span>, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\'planet\'</span> => <span class=\"hljs-string\">\'World!\'</span>)); <span class=\"hljs-comment\">// \"Hello World!\"</span></pre>\r\n<p>To see more advanced examples, I suggest taking a look at the official <a href=\"http://mustache.github.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Mustache docs</a>.</p>\r\n<h2>18. Gaufrette - File System Abstraction Layer</h2>\r\n<p><a href=\"https://github.com/KnpLabs/Gaufrette\" target=\"_blank\" rel=\"noreferrer noopener\">Gaufrette</a> is a PHP5 library that provides a filesystem abstraction layer. It makes it possible to work with local files, FTP servers, Amazon S3 and more in the same way. This permits you to develop your application without having to know how you are going to access your files in the future.</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Gaufrette</span>\\<span class=\"hljs-title\">Filesystem</span>;\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Gaufrette</span>\\<span class=\"hljs-title\">Adapter</span>\\<span class=\"hljs-title\">Ftp</span> <span class=\"hljs-title\">as</span> <span class=\"hljs-title\">FtpAdapter</span>;\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Gaufrette</span>\\<span class=\"hljs-title\">Adapter</span>\\<span class=\"hljs-title\">Local</span> <span class=\"hljs-title\">as</span> <span class=\"hljs-title\">LocalAdapter</span>; \r\n\r\n<span class=\"hljs-comment\">// Local files:</span>\r\n$adapter = <span class=\"hljs-keyword\">new</span> LocalAdapter(<span class=\"hljs-string\">\'/var/media\'</span>); \r\n\r\n<span class=\"hljs-comment\">// Optionally use an FTP adapter:</span>\r\n<span class=\"hljs-comment\">// $ftp = new FtpAdapter($path, $host, $username, $password, $port); </span>\r\n\r\n<span class=\"hljs-comment\">// Initialize the filesystem:</span>\r\n$filesystem = <span class=\"hljs-keyword\">new</span> Filesystem($adapter); \r\n\r\n<span class=\"hljs-comment\">// Use it: </span>\r\n\r\n$content = $filesystem->read(<span class=\"hljs-string\">\'myFile\'</span>);\r\n$content = <span class=\"hljs-string\">\'Hello I am the new content\'</span>;\r\n$filesystem->write(<span class=\"hljs-string\">\'myFile\'</span>, $content);</pre>\r\n<p>There are also caching and in-memory adapters, and more will be added over time.</p>\r\n<h2>19. Omnipay - Payment Processing Library</h2>\r\n<p><a href=\"https://github.com/adrianmacneil/omnipay\" target=\"_blank\" rel=\"noreferrer noopener\">Omnipay</a> is a payment processing library for PHP. It has a clear and consistent API and supports dozens of gateways. With this library, you only need to learn one API and work with a variety of payment processors. Here is an example:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Omnipay</span>\\<span class=\"hljs-title\">CreditCard</span>;\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Omnipay</span>\\<span class=\"hljs-title\">GatewayFactory</span>;\r\n\r\n$gateway = GatewayFactory::create(<span class=\"hljs-string\">\'Stripe\'</span>);\r\n$gateway->setApiKey(<span class=\"hljs-string\">\'abc123\'</span>);\r\n\r\n$formData = [<span class=\"hljs-string\">\'number\'</span> => <span class=\"hljs-string\">\'4111111111111111\'</span>, <span class=\"hljs-string\">\'expiryMonth\'</span> => <span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">\'expiryYear\'</span> => <span class=\"hljs-number\">2016</span>];\r\n$response = $gateway->purchase([<span class=\"hljs-string\">\'amount\'</span> => <span class=\"hljs-number\">1000</span>, <span class=\"hljs-string\">\'card\'</span> => $formData]);\r\n\r\n<span class=\"hljs-keyword\">if</span> ($response->isSuccessful()) {\r\n    <span class=\"hljs-comment\">// payment was successful: update database</span>\r\n    print_r($response);\r\n} <span class=\"hljs-keyword\">elseif</span> ($response->isRedirect()) {\r\n    <span class=\"hljs-comment\">// redirect to offsite payment gateway</span>\r\n    $response->redirect();\r\n} <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-comment\">// payment failed: display message to customer</span>\r\n    <span class=\"hljs-keyword\">exit</span>($response->getMessage());\r\n}</pre>\r\n<p>Using the same consistent API makes it easy to support multiple payment processors or to switch as the need arises.</p>\r\n<h2>20. Upload - For Handling File Uploads</h2>\r\n<p><a href=\"https://github.com/codeguy/Upload\" target=\"_blank\" rel=\"noreferrer noopener\">Upload</a> is a library that simplifies file uploading and validation. When a form is submitted, the library can check the type of file and size:</p>\r\n<pre class=\"hljs php\">$storage = <span class=\"hljs-keyword\">new</span> \\Upload\\Storage\\FileSystem(<span class=\"hljs-string\">\'/path/to/directory\'</span>);\r\n$file = <span class=\"hljs-keyword\">new</span> \\Upload\\File(<span class=\"hljs-string\">\'foo\'</span>, $storage);\r\n\r\n<span class=\"hljs-comment\">// Validate file upload</span>\r\n$file->addValidations(<span class=\"hljs-keyword\">array</span>(\r\n    <span class=\"hljs-comment\">// Ensure file is of type \"image/png\"</span>\r\n    <span class=\"hljs-keyword\">new</span> \\Upload\\Validation\\Mimetype(<span class=\"hljs-string\">\'image/png\'</span>),\r\n\r\n    <span class=\"hljs-comment\">// Ensure file is no larger than 5M (use \"B\", \"K\", M\", or \"G\")</span>\r\n    <span class=\"hljs-keyword\">new</span> \\Upload\\Validation\\Size(<span class=\"hljs-string\">\'5M\'</span>)\r\n));\r\n\r\n<span class=\"hljs-comment\">// Try to upload file</span>\r\n<span class=\"hljs-keyword\">try</span> {\r\n    <span class=\"hljs-comment\">// Success!</span>\r\n    $file->upload();\r\n} <span class=\"hljs-keyword\">catch</span> (\\<span class=\"hljs-keyword\">Exception</span> $e) {\r\n    <span class=\"hljs-comment\">// Fail!</span>\r\n    $errors = $file->getErrors();\r\n}</pre>\r\n<p>This will save you lots of tedious code.</p>\r\n<h2>21. HTMLPurifier - HTML XSS Protection</h2>\r\n<p><a href=\"http://htmlpurifier.org/\" target=\"_blank\" rel=\"noreferrer noopener\">HTMLPurifier</a> (<a href=\"https://github.com/ezyang/htmlpurifier\" target=\"_blank\" rel=\"noreferrer noopener\">on github</a>) is an HTML filtering library that protects your code from XSS attacks by using a combination of robust whitelists and agressive parsing. It also makes sure that the resulting markup is standards compliant.</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">require_once</span> <span class=\"hljs-string\">\'/path/to/HTMLPurifier.auto.php\'</span>;\r\n\r\n$config = HTMLPurifier_Config::createDefault();\r\n$purifier = <span class=\"hljs-keyword\">new</span> HTMLPurifier($config);\r\n$clean_html = $purifier->purify($dirty_html);</pre>\r\n<p>The best place to use this library would be when you are allowing users to submit HTML which is to be displayed unmodified on the site.</p>\r\n<h2>22. ColorJizz-PHP - Color Manipulation Library</h2>\r\n<p><a href=\"https://github.com/mikeemoo/ColorJizz-PHP\" target=\"_blank\" rel=\"noreferrer noopener\">ColorJizz</a> is a tiny library that can convert between different color formats and do simple color arithmetic. For example:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">MischiefCollective</span>\\<span class=\"hljs-title\">ColorJizz</span>\\<span class=\"hljs-title\">Formats</span>\\<span class=\"hljs-title\">Hex</span>;\r\n\r\n$red_hex = <span class=\"hljs-keyword\">new</span> Hex(<span class=\"hljs-number\">0xFF0000</span>);\r\n$red_cmyk = $hex->toCMYK();\r\n<span class=\"hljs-keyword\">echo</span> $red_cmyk; <span class=\"hljs-comment\">// 0,1,1,0</span>\r\n\r\n<span class=\"hljs-keyword\">echo</span> Hex::fromString(<span class=\"hljs-string\">\'red\'</span>)->hue(<span class=\"hljs-number\">-20</span>)->greyscale(); <span class=\"hljs-comment\">// 555555</span></pre>\r\n<p>It has support for and can manipulate all major color formats.</p>\r\n<h2>23. PHP Geo - Geo Location Library</h2>\r\n<p><a href=\"https://github.com/mjaschen/phpgeo\" target=\"_blank\" rel=\"noreferrer noopener\">phpgeo</a> is a simple library for calculating distances between geographic coordinates with high precision. For example:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Location</span>\\<span class=\"hljs-title\">Coordinate</span>;\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">Location</span>\\<span class=\"hljs-title\">Distance</span>\\<span class=\"hljs-title\">Vincenty</span>;\r\n\r\n$coordinate1 = <span class=\"hljs-keyword\">new</span> Coordinate(<span class=\"hljs-number\">19.820664</span>, <span class=\"hljs-number\">-155.468066</span>); <span class=\"hljs-comment\">// Mauna Kea Summit</span>\r\n$coordinate2 = <span class=\"hljs-keyword\">new</span> Coordinate(<span class=\"hljs-number\">20.709722</span>, <span class=\"hljs-number\">-156.253333</span>); <span class=\"hljs-comment\">// Haleakala Summit</span>\r\n\r\n$calculator = <span class=\"hljs-keyword\">new</span> Vincenty();\r\n$distance = $calculator->getDistance($coordinate1, $coordinate2); <span class=\"hljs-comment\">// returns 128130.850 (meters; ?128 kilometers)</span></pre>\r\n<p>This will work great in apps that make use of location data. To obtain the coordinates, you can use the HTML5 Location API, Yahoo\'s API (or both, like we did in the <a title=\"How to use Geolocation and Yahooâs APIs to build a simple weather webapp\" href=\"https://tutorialzine.com/2012/05/weather-forecast-geolocation-jquery/\" target=\"_blank\" rel=\"noreferrer noopener\">weather web app tutorial</a>).</p>\r\n<h2>24. ShellWrap - Beautiful Shell Wrapper</h2>\r\n<p><a href=\"https://github.com/MrRio/shellwrap\" target=\"_blank\" rel=\"noreferrer noopener\">ShellWrap</a> is library that allows you to work with the powerful Linux/Unix command line tools in PHP through a beautiful syntax:</p>\r\n<pre class=\"hljs php\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">\'ShellWrap.php\'</span>;\r\n<span class=\"hljs-keyword\">use</span> \\<span class=\"hljs-title\">MrRio</span>\\<span class=\"hljs-title\">ShellWrap</span> <span class=\"hljs-title\">as</span> <span class=\"hljs-title\">sh</span>; \r\n\r\n<span class=\"hljs-comment\">// List all files in current dir</span>\r\n<span class=\"hljs-keyword\">echo</span> sh::ls(); \r\n\r\n<span class=\"hljs-comment\">// Checkout a branch in git</span>\r\nsh::git(<span class=\"hljs-string\">\'checkout\'</span>, <span class=\"hljs-string\">\'master\'</span>); \r\n\r\n<span class=\"hljs-comment\">// You can also pipe the output of one command, into another</span>\r\n<span class=\"hljs-comment\">// This downloads example.com through cURL, follows location, then pipes through grep to</span>\r\n<span class=\"hljs-comment\">// filter for \'html\'</span>\r\n<span class=\"hljs-keyword\">echo</span> sh::grep(<span class=\"hljs-string\">\'html\'</span>, sh::curl(<span class=\"hljs-string\">\'http://example.com\'</span>, <span class=\"hljs-keyword\">array</span>(\r\n    <span class=\"hljs-string\">\'location\'</span> => <span class=\"hljs-keyword\">true</span>\r\n))); \r\n\r\n<span class=\"hljs-comment\">// Touch a file to create it</span>\r\nsh::touch(<span class=\"hljs-string\">\'file.html\'</span>); \r\n\r\n<span class=\"hljs-comment\">// Remove file</span>\r\nsh::rm(<span class=\"hljs-string\">\'file.html\'</span>); \r\n\r\n<span class=\"hljs-comment\">// Remove file again (this fails, and throws an exception because the file doesn\'t exist) </span>\r\n\r\n<span class=\"hljs-keyword\">try</span> {\r\n    sh::rm(<span class=\"hljs-string\">\'file.html\'</span>);\r\n} <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\r\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\'Caught failing sh::rm() call\'</span>;\r\n}</pre>\r\n<p>The library throws exceptions when an error occurs in the command, so you can act accordingly. It also can pipe the output of one command as the input of another for even greater flexibility.</p>','2019-07-08 11:35:42','There are lots of useful libraries released every day, and with the help of Composer and Github, they are easy to discover and use. Here are 24 of the coolest that I\'ve come across. ',1,1,'2019-07-08 11:35:50','24 Cool PHP Libraries You Should Know About ','2019-07-08 11:35:42',23,1,4,0),(17,'<h1 class=\"article__title\">Learn SQL In 20 Minutes</h1>\r\n<p>Every web developer should know <a href=\"https://en.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noreferrer noopener\">SQL</a>. Although it has been around since the 70s, it is still widely used, and you can\'t build a serious application without it. Most full-stack frameworks have libraries for dealing with the SQL complexity - <a href=\"http://guides.rubyonrails.org/active_record_basics.html\" target=\"_blank\" rel=\"noreferrer noopener\">ActiveRecord</a>, <a href=\"http://www.doctrine-project.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Doctrine</a>, <a href=\"http://hibernate.org/orm/\" target=\"_blank\" rel=\"noreferrer noopener\">Hibernate</a> and more. But often times you need to get your hands dirty and write low-level SQL.</p>\r\n<p>This is why we\'ve prepared a short and to-the-point introduction to the basics of SQL. Within the article, you will find our interactive editors for writing and executing your code. Don\'t be afraid to experiment with them and try to complete the bonus tasks.</p>\r\n<p>Let\'s begin!</p>\r\n<h2>1. Create Table</h2>\r\n<p>When creating new tables in SQL the <code>CREATE TABLE</code> statement is called. It expects as it\'s arguments all the columns we want in the table, as well as the their data types.</p>\r\n<p>Here we are creating a simple table called <strong>months</strong>. It consists of 3 columns:</p>\r\n<ul>\r\n<li>id - The number of the month in the calendar year (integer).</li>\r\n<li>name - Name of the month (string, maximum of 10 characters).</li>\r\n<li>days - The number of days in that month (integer).</li>\r\n</ul>\r\n<p>And this is how the respective SQL looks like:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">months</span> (<span class=\"hljs-keyword\">id</span> <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-keyword\">name</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-keyword\">days</span> <span class=\"hljs-built_in\">int</span>);</pre>\r\n<p>Also when creating tables, it\'s advisable to add a primary key to one of the columns. It will help keep entries unique and will speed up select queries. We won\'t be covering them in this lesson but you can read about them <a href=\"http://www.w3schools.com/sql/sql_primarykey.asp\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\r\n<h2>2. Insert Rows</h2>\r\n<p>Now let\'s populate <strong>months</strong> with a few rows of information. Adding entries to a table is done via the <code>INSERT</code> statement. There are two different ways to use it:</p>\r\n<p>The first way does not specify the column names where the data will be inserted, it only expects the values and leaves it up to the developer to provide all the data in the correct order.</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-keyword\">months</span> <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\'January\'</span>,<span class=\"hljs-number\">31</span>);</pre>\r\n<p>The above is shorter, but there is a major issue - if we add additional columns in the future, the query will break. The preferred way to write this is to include the columns:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-keyword\">months</span> (<span class=\"hljs-keyword\">id</span>,<span class=\"hljs-keyword\">name</span>,<span class=\"hljs-keyword\">days</span>) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\'February\'</span>,<span class=\"hljs-number\">29</span>);</pre>\r\n<h2>3. Select</h2>\r\n<p>Select queries are our best friend when we want to fetch data from the database. They are used all the time so this lesson is going to spend a lot of time covering them.</p>\r\n<p>The most simple <code>SELECT</code> example would be this query, which will return all the columns and rows from the <strong>characters</strong> table:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-string\">\"characters\"</span></pre>\r\n<p>The asterisk (*) means that we want to grab all of the columns, without excluding anything. Since SQL databases usually consist of more then one table, the <code>FROM</code> keyword is required to specify which table we want to look in.</p>\r\n<p>Sometimes we don\'t want all of the columns in a table. SQL allows us to choose and get only the ones we need: instead of putting the asterisk (*), we write the names of the desired columns.</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">name</span>, weapon <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-string\">\"characters\"</span></pre>\r\n<p>Also, in many cases we want the results be sorted in a certain way. In SQL we do this with <code>ORDER BY.</code> It can take an optional modifier - ASC (default) or DESC for sorting direction:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">name</span>, weapon <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-string\">\"characters\"</span> <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-keyword\">name</span> <span class=\"hljs-keyword\">DESC<br /></span></pre>\r\n<h2>4. Where</h2>\r\n<p>You learned how to select only specific columns, but what if only certain rows need to be acquired. To the rescue here comes the <code>WHERE</code> clause, allowing us to filter data depending on a condition.</p>\r\n<p>In this query we select only those entries from the <strong>characters</strong> table, who use a <strong>pistol</strong> to fight baddies.</p>\r\n<h2>5. AND / OR</h2>\r\n<p><code>WHERE</code> conditions can be made as specific as you like, with the help of the logical operators (<code>AND,OR</code>) and math-like comparisons (=,<,>,<=,>=,<>).</p>\r\n<p>Here we have a table containing the top 4 most sold albums of all time. Let\'s select those of them that are classified as <strong>rock</strong> and have sold <strong>under 50 million copies</strong>. This can easily be done by placing the <code>AND</code> operator between the two statements.</p>\r\n<h2>6. In/Between/Like</h2>\r\n<p>WHERE statements also support a few special commands, allowing a quick way to check commonly used queries. They are:</p>\r\n<ul>\r\n<li>IN - compares the column to multiple possible values, resolves true if it matches at least one</li>\r\n<li>BETWEEN - checks if a value is within a range</li>\r\n<li>LIKE - searches for a specific pattern</li>\r\n</ul>\r\n<p>For example if we want to do a query selecting the <strong>pop</strong> and <strong>soul</strong> albums from our table, we can use <code>IN(\"value1\",\"value2\")</code>.</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> albums <span class=\"hljs-keyword\">WHERE</span> genre <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-string\">\'pop\'</span>,<span class=\"hljs-string\">\'soul\'</span>);</pre>\r\n<p>If we want to get all the albums released <strong>between 1975 and 1985</strong> we would write:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> albums <span class=\"hljs-keyword\">WHERE</span> released <span class=\"hljs-keyword\">BETWEEN</span> <span class=\"hljs-number\">1975</span> <span class=\"hljs-keyword\">AND</span> <span class=\"hljs-number\">1985</span>;</pre>\r\n<h2>7. Functions</h2>\r\n<p>SQL is packed with functions that do all sorts of helpful stuff. Here are some of the most regularly used ones:</p>\r\n<ul>\r\n<li><code>COUNT()</code> - returns the number of rows</li>\r\n<li><code>SUM()</code> - returns the total sum of a numeric column</li>\r\n<li><code>AVG()</code> - returns the average of a set of values</li>\r\n<li><code>MIN()</code> / <code>MAX()</code> - gets the minimum/maximum value from a column</li>\r\n</ul>\r\n<h2>8. Nested Select</h2>\r\n<p>In the previous point we learned how to do simple calculations with data. If we want to actually use the result from these calculations, often times a nested query (also known as <em>sub select</em>) is necessary. Let\'s say we want to get the <strong>artist</strong>, <strong>album</strong> and <strong>release year</strong> for the <strong>oldest</strong> album in the table.</p>\r\n<p>We know how to get these specific columns:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> artist, album, released <span class=\"hljs-keyword\">FROM</span> albums;</pre>\r\n<p>We also know how to get the earliest year:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">MIN</span>(released) <span class=\"hljs-keyword\">FROM</span> album;</pre>\r\n<p>All that is needed now is to combine the two with the help of WHERE:</p>\r\n<h2>9. Joining Tables</h2>\r\n<p>In more complex databases, most of the time there are several tables connected to each other in some way. For example, below in the editor are two tables about video games and video game developers.</p>\r\n<p>In the <strong>video_games</strong> table there is a <strong>developer</strong> column, but it holds an integer instead of the name of the developer. This number represents the <strong>id</strong> of the respective developer from the <strong>game_developers</strong> table, linking logically the two sheets, allowing us to use the information stored in both of them at the same time.</p>\r\n<p>If we want to create a query that returns everything we need to know about the games, we can use <code>INNER JOIN</code> to acquire the columns from both tables.</p>\r\n<h2>10. Aliases</h2>\r\n<p>If you look at the previous example you\'ll notice that there are two columns called <strong>name</strong>. That\'s confusing, so let\'s change it by setting an alias to one of the repeating columns: <strong>name</strong> from <strong>game_developers</strong> will appear as <strong>developer</strong>.</p>\r\n<p>We can also shorten the query drastically by setting aliases to the table names: <strong>video_games</strong> becomes <strong>games</strong> and <strong>game_developers</strong> becomes <strong>devs</strong>.</p>\r\n<h2>1. Update</h2>\r\n<p>Often times we have to change the data in some of the rows. In SQL this is done via the <code>UPDATE</code> statement.</p>\r\n<p>The usage of <code>UPDATE</code> consists of</p>\r\n<ul>\r\n<li>Choosing the table where the record we want to change is located.</li>\r\n<li>Setting new value(s) for the wanted column(s).</li>\r\n<li>Selecting with <code>WHERE</code> which of the rows we want to update. If this is omitted all rows in the table will change.</li>\r\n</ul>\r\n<p>Here is a table of some of the highest rated TV series of all time. There is one tiny problem about it though, the show <em>Game of Thrones</em> is described as comedy, which it clearly isn\'t. Let\'s fix that!</p>\r\n<h2>12. Delete Rows</h2>\r\n<p>Deleting a table row through SQL is a really simple process. All that is needed is to select the right table and row we want to remove.</p>\r\n<h2>13. Deleting Tables</h2>\r\n<p>If we want to delete all the rows, but leave the table itself, the proper command is TRUNCATE:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">TRUNCATE</span> <span class=\"hljs-keyword\">TABLE</span> table_name;</pre>\r\n<p>In the case when we actually want to remove every trace of the table whatsoever, the DROP command comes into play:</p>\r\n<pre class=\"hljs sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> table_name;</pre>\r\n<p>Be very careful with these commands. There is no undo!</p>\r\n<h2>Conclusion</h2>\r\n<p>This wraps up our tutorial on SQL! There is a lot more to cover, but the above should be enough to give you a few practical skills in your web dev career.</p>\r\n<p>For more information on SQL check out these great resources:</p>\r\n<ul>\r\n<li>Codeacademy SQL course - <a href=\"https://www.codecademy.com/learn/learn-sql\" target=\"_blank\" rel=\"noreferrer noopener\">here</a></li>\r\n<li>SQL Fiddle: online tool for testing and sharing SQL - <a href=\"http://sqlfiddle.com/\" target=\"_blank\" rel=\"noreferrer noopener\">here</a></li>\r\n</ul>\r\n<p>Â </p>\r\n<p>Â </p>\r\n<pre class=\"hljs sql\">Â </pre>','2019-07-08 11:59:28','Every web developer should know SQL. Most full-stack frameworks have libraries for dealing with the SQL complexity - ActiveRecord, Doctrine, Hibernate and more. But often times you need to get your hands dirty and write low-level SQL.',1,3,'2019-07-08 11:59:53','Learn SQL In 20 Minutes ','2019-07-08 11:59:28',22,4,1,3),(19,'<h1 class=\"article__title\">9 Excellent Resources for Learning Kotlin</h1>\r\n<p>?otlin is a modern programming language that runs on the Java Virtual Machine. It has an elegant syntax and is interoperable with all existing Java libraries. In the 2017 Google I/O, the Android team <a href=\"https://www.youtube.com/watch?v=d8ALcQiuPWs\" target=\"_blank\" rel=\"noreferrer noopener\">announced</a> that Kotlin will become an official programming language for the Android platform. This puts Kotlin in position to become one of the top programming languages of the future.</p>\r\n<p>To help you get started with your Kotlin journey, we\'ve curated a list of some of the best Kotlin learning resources available right now. We haven\'t included any paid courses or books, everything on the list is 100% free.</p>\r\n<p><img class=\"img-fluid\" src=\"https://tutorialzine.com/media/2017/05/1-kotlin-tutorials.png\" alt=\"tut1\" width=\"1570\" height=\"480\" /></p>\r\n<h2><a href=\"https://kotlinlang.org/docs/reference/\" target=\"_blank\" rel=\"noreferrer noopener\">The Kotlin Website</a></h2>\r\n<p>The official website for the project is a very good place to start your Kotlin education. In the <a href=\"https://kotlinlang.org/docs/reference/\" target=\"_blank\" rel=\"noreferrer noopener\">reference</a> section you can find in-depth documentation that covers all the main concepts and features of the language. The <a href=\"https://kotlinlang.org/docs/tutorials/\" target=\"_blank\" rel=\"noreferrer noopener\">tutorials</a> section has a variety of practical step-by-step guides on setting up a working environment and working with the compiler.</p>\r\n<p>There is also the <a href=\"https://try.kotlinlang.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Kotlin editor</a>, a browser app that let\'s you try out the language. It is loaded with many examples including the Koans course - by far the best way to get familiar with the syntax.</p>\r\n<h2><a href=\"https://medium.com/@juanchosaravia/learn-kotlin-while-developing-an-android-app-introduction-567e21ff9664\" target=\"_blank\" rel=\"noreferrer noopener\">Keddit: Learn Kotlin while developing an Android App</a></h2>\r\n<p>An excellent 11-part series by Juan Ignacio Saravia in which he puts Kotlin into action and builds a Reddit clone app. The tutorials cover a vast number of topics ranging from setting up the workspace to using APIs and even unit testing. The code is available on <a href=\"https://github.com/juanchosaravia/KedditBySteps\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub</a>.</p>\r\n<h2><a href=\"https://antonioleiva.com/category/blog/\" target=\"_blank\" rel=\"noreferrer noopener\">Antonio Leiva\'s Blog</a></h2>\r\n<p>Antoni Leiva\'s blog is dedicated to all things Kotlin. It is updated weekly(ish) with high-quality tutorials and articles in which more advanced Kotlin developers can learn about new libraries and find all kinds of practical techniques.</p>\r\n<h2><a href=\"https://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html\" target=\"_blank\" rel=\"noreferrer noopener\">Android Announces Support for Kotlin</a></h2>\r\n<p>The official Google blog post that explains the reasons behind the exciting announcement and why Kotlin deserves a place in the Android ecosystem. The article then goes on to give a brief preview of some of the awesome syntax improvements that Kotlin brings.</p>\r\n<h2><a href=\"https://github.com/dbacinski/Design-Patterns-In-Kotlin\" target=\"_blank\" rel=\"noreferrer noopener\">Design Patterns implemented in Kotlin</a></h2>\r\n<p>Dariusz Baci?ski has created a useful GitHub repo containing common design patterns implemented in Kotlin. There are similar projects written in several languages including <a href=\"https://github.com/iluwatar/java-design-patterns\" target=\"_blank\" rel=\"noreferrer noopener\">Java</a>, <a href=\"https://github.com/ochococo/Design-Patterns-In-Swift\" target=\"_blank\" rel=\"noreferrer noopener\">Swift</a>, <a href=\"https://github.com/tcorral/Design-Patterns-in-Javascript\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript</a>, and <a href=\"https://github.com/kamranahmedse/design-patterns-for-humans\" target=\"_blank\" rel=\"noreferrer noopener\">PHP</a>, so if you are coming from one of these programming background you can use them as a reference point.</p>\r\n<h2><a href=\"https://learnxinyminutes.com/docs/kotlin/\" target=\"_blank\" rel=\"noreferrer noopener\">Learn X in Y minutes</a></h2>\r\n<p>A quick cheatsheet with some of the most important features and syntax quirks that will help you write better Kotlin code. There are examples on working with classes, loops, and lists, as well as implementations of classic programming problems such as generating a Fibonacci sequence.</p>\r\n<h2><a href=\"https://blog.jetbrains.com/kotlin/\" target=\"_blank\" rel=\"noreferrer noopener\">The Kotlin Blog</a></h2>\r\n<p>The official blog for Kotlin by its authors at JetBrains. Here you can find all Kotlin related news and updates, as well as all kinds of tutorials, tips, and other useful articles.</p>\r\n<h2><a href=\"https://developer.android.com/kotlin/get-started.html\" target=\"_blank\" rel=\"noreferrer noopener\">Get Started with Kotlin on Android</a></h2>\r\n<p>A helpful article from the Google Developers blog that explains how to setup Android Studio for Kotlin, how to convert .java files to .kt files, and how to incorporate the new language into an existing Android project. There are also some code comparisons on the same Android APIs used with both Kotlin and Java.</p>\r\n<h2><a href=\"https://fernandocejas.com/2017/02/03/android-testing-with-kotlin/\" target=\"_blank\" rel=\"noreferrer noopener\">Android Testing With Kotlin</a></h2>\r\n<p>Great article that shows us how to write and run tests for Android apps using Kotlin. The author does a great job of explaining what different types of tests are available, when to use them, and how to make sure we are testing properly. Another good tutorial on this topic can be found <a href=\"https://github.com/dbacinski/Android-Testing-With-Kotlin/blob/master/docs/Unit-Testing-Introduction.md\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>','2019-07-15 23:36:56','Kotlin is a modern programming language that runs on the Java Virtual Machine. It has an elegant syntax and is interoperable with all existing Java libraries.',1,1,'2019-07-15 23:48:29','9 Excellent Resources for Learning Kotlin ','2019-07-15 23:47:44',16,2,5,4);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(65) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_46ccwnsi9409t36lurvtyljak` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (5,'css'),(2,'java'),(3,'javascript'),(1,'php'),(4,'sql');
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `body` varchar(511) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `article_id` bigint(20) NOT NULL,
  `user_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK5yx0uphgjc6ik6hb82kkw501y` (`article_id`),
  KEY `FK8kcum44fvpupyw6f5baccx25c` (`user_id`),
  CONSTRAINT `FK5yx0uphgjc6ik6hb82kkw501y` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE,
  CONSTRAINT `FK8kcum44fvpupyw6f5baccx25c` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (2,'Easy to understand and nice. Thanks for info','2019-07-15 23:16:54','2019-07-15 23:16:54',17,5),(3,'Great quick tutorial! Short and sweet with just the right examples and practice questions. Thanks for this.','2019-07-15 23:23:26','2019-07-15 23:23:26',17,6),(4,'Really good article for learning SQL quickly.\r\nThanks a lot.','2019-07-15 23:24:17','2019-07-15 23:24:17',17,1),(5,'Thanks for your suggestion. If anyone choice books to learn about kotlin, he can check here to get best kotlin books. Hope this will helpful for the begineers.','2019-07-15 23:53:07','2019-07-15 23:53:07',19,5),(6,'Thanks for this helpful information excellent-resources!!!!','2019-07-15 23:54:00','2019-07-15 23:54:00',19,1),(7,'You can also have a look here to find a list of best courses and free tutorials to learn Kotlin.','2019-07-15 23:56:02','2019-07-15 23:56:02',19,1),(8,'Ovo je veoma koristan  clanak\r\n','2019-07-19 09:25:44','2019-07-19 09:25:44',19,1);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contact`
--

DROP TABLE IF EXISTS `contact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `contact` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `body` varchar(511) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` datetime DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(45) COLLATE utf8_unicode_ci NOT NULL,
  `phone` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `updated_at` datetime DEFAULT NULL,
  `view` bit(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contact`
--

LOCK TABLES `contact` WRITE;
/*!40000 ALTER TABLE `contact` DISABLE KEYS */;
/*!40000 ALTER TABLE `contact` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dislike_article`
--

DROP TABLE IF EXISTS `dislike_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `dislike_article` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `article_id` bigint(20) NOT NULL,
  `user_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK1iw2snr2b6vdbpgqiky3j8rjv` (`article_id`),
  KEY `FKtpq8hkn4upcy12pmnjrxwqryi` (`user_id`),
  CONSTRAINT `FK1iw2snr2b6vdbpgqiky3j8rjv` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE,
  CONSTRAINT `FKtpq8hkn4upcy12pmnjrxwqryi` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=63 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dislike_article`
--

LOCK TABLES `dislike_article` WRITE;
/*!40000 ALTER TABLE `dislike_article` DISABLE KEYS */;
INSERT INTO `dislike_article` VALUES (1,2,1),(2,14,4),(3,15,4),(26,16,1),(27,16,1),(53,17,5),(57,16,5),(58,15,5),(60,19,2);
/*!40000 ALTER TABLE `dislike_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `like_article`
--

DROP TABLE IF EXISTS `like_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `like_article` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `article_id` bigint(20) NOT NULL,
  `user_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKi9mjb30s79fl2gpjic4e0ej6q` (`article_id`),
  KEY `FKplrv3mam30ram97phqvbkmlgb` (`user_id`),
  CONSTRAINT `FKi9mjb30s79fl2gpjic4e0ej6q` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE,
  CONSTRAINT `FKplrv3mam30ram97phqvbkmlgb` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `like_article`
--

LOCK TABLES `like_article` WRITE;
/*!40000 ALTER TABLE `like_article` DISABLE KEYS */;
INSERT INTO `like_article` VALUES (1,1,1),(2,15,4),(30,16,1),(62,13,1),(63,17,5),(64,14,5),(66,19,1);
/*!40000 ALTER TABLE `like_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role`
--

DROP TABLE IF EXISTS `role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_8sewwnpamngi6b1dwaa88askk` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role`
--

LOCK TABLES `role` WRITE;
/*!40000 ALTER TABLE `role` DISABLE KEYS */;
INSERT INTO `role` VALUES (2,'ROLE_ADMIN'),(1,'ROLE_USER');
/*!40000 ALTER TABLE `role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `created_at` datetime DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `enabled` bit(1) NOT NULL,
  `firstname` varchar(45) COLLATE utf8_unicode_ci NOT NULL,
  `lastname` varchar(45) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `updated_at` datetime DEFAULT NULL,
  `username` varchar(45) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_sb8bbouer5wak8vyiiy4pf2bx` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'2019-07-07 07:29:18','dejan@test.com',_binary '','dejan','ristic','$2a$12$HsnRe0oINN2Ox/VDIZH5ku5hKvCyRIeyNYN4glSZt7sOj8qHt8eVq','2019-07-07 07:29:18','dejan'),(2,'2019-07-07 07:29:18','admin@test.com',_binary '','dejan','ristic','$2a$12$nYShHgpqQRAvn3xZaPC7jec4jd.xq3QF6CsPOwvvfJErwvsA3WC6m','2019-07-07 07:29:18','admin'),(3,'2019-07-07 13:54:55','petar@test.com',_binary '','petar','petrovic','$2a$12$KVXIrXxZJQfHK47LK5q89OYVNNLUA8UQu7MQbWORpAp3rDhQSDQSe','2019-07-07 13:54:55','petar'),(4,'2019-07-08 10:54:51','branko@test.com',_binary '','branko','brankovic','$2a$12$2czRL3tu4d0P2RlIEHPWCuz0z5Rf8BjXCwb5tXpvLb5p/jHKpaOtO','2019-07-08 10:54:51','branko'),(5,'2019-07-11 13:04:56','sanja@test.com',_binary '','sanja','petrovic','$2a$12$7hW/B6grzwKaS/P/JVgpfOP484OPN3prqzZ0fqrhVj/0XyVNdu0Ny','2019-07-11 13:04:56','sanja'),(6,'2019-07-15 23:23:08','goran@test.com',_binary '','goran','ivanovic','$2a$12$T6oyGln5Y4k3EGey96SroOR6VbCm6TUYq0Mdy5USGEFiyFrv2fk/y','2019-07-15 23:23:08','goran');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_role`
--

DROP TABLE IF EXISTS `user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_role` (
  `user_id` bigint(20) NOT NULL,
  `role_id` bigint(20) NOT NULL,
  PRIMARY KEY (`role_id`,`user_id`),
  KEY `FK859n2jvi8ivhui0rl0esws6o` (`user_id`),
  CONSTRAINT `FK859n2jvi8ivhui0rl0esws6o` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`),
  CONSTRAINT `FKa68196081fvovjhkek5m97n3y` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_role`
--

LOCK TABLES `user_role` WRITE;
/*!40000 ALTER TABLE `user_role` DISABLE KEYS */;
INSERT INTO `user_role` VALUES (1,1),(3,1),(4,1),(5,1),(6,1),(2,2);
/*!40000 ALTER TABLE `user_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `visitor`
--

DROP TABLE IF EXISTS `visitor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `visitor` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `count` int(11) DEFAULT NULL,
  `day` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `visitor`
--

LOCK TABLES `visitor` WRITE;
/*!40000 ALTER TABLE `visitor` DISABLE KEYS */;
INSERT INTO `visitor` VALUES (1,15,'MONDAY'),(2,21,'TUESDAY'),(3,29,'WEDNESDAY'),(4,13,'THURSDAY'),(5,7,'FRIDAY'),(6,5,'SATURDAY'),(7,14,'SUNDAY');
/*!40000 ALTER TABLE `visitor` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-07-19 13:39:35
